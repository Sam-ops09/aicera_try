{
    "checksum": "012d105dc491fbe147bbdf0ed244befb697afa13c0a86126702932f403b427ea",
    "data": {
    "id": "0f8afbf6-0099-4472-8b24-fde179e3b3a7",
    "createdAt": 1750490509985,
    "updatedAt": 1750491538252,
    "title": "Mobile Scrolling Optimization Guide",
    "messages": [
        {
            "id": "670696cd-49be-40bc-8586-bfefbde9abd2",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "this is very glitchy when on mobile devices"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "components/wwd-cards.tsx",
                    "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "\"use client\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { useRef, useEffect, useState, useCallback } from \"react\";\nimport { useTranslations } from \"next-intl\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport {\n\twhatwedoImg1,\n\twhatwedoImg2,\n\twhatwedoImg3,\n\twhatwedoImg4,\n} from \"@/public\";\n\n// Register ScrollTrigger plugin\nif (typeof window !== \"undefined\") {\n\tgsap.registerPlugin(ScrollTrigger);\n}\n\ninterface CardData {\n\tid: number;\n\ttitle: string;\n\theading1: string;\n\theading2: string;\n\tpara: string;\n\thref: string;\n\tbgColor: string;\n\ttextColor: string;\n\tlinkColor: string;\n\timage: any;\n}\n\nexport default function Card() {\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\tconst scrollContainerRef = useRef<HTMLDivElement>(null);\n\tconst cardsRef = useRef<HTMLDivElement[]>([]);\n\tconst contentRefs = useRef<HTMLDivElement[]>([]);\n\tconst imageRefs = useRef<HTMLDivElement[]>([]);\n\tconst parallaxRefs = useRef<HTMLDivElement[]>([]);\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\tconst [viewportSize, setViewportSize] = useState({ width: 0, height: 0 });\n\tconst [currentCardIndex, setCurrentCardIndex] = useState(0);\n\tconst snapTimeoutRef = useRef<NodeJS.Timeout>();\n\tconst isScrollingRef = useRef(false);\n\tconst lastScrollY = useRef(0);\n\tconst scrollDirection = useRef<'up' | 'down'>('down');\n\tconst t = useTranslations(\"whatwedoContent\");\n\n\tconst cardData: CardData[] = [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: t(\"title1\"),\n\t\t\theading1: t(\"heading1\"),\n\t\t\theading2: t(\"heading2\"),\n\t\t\tpara: t(\"para1\"),\n\t\t\thref: t(\"href1\"),\n\t\t\tbgColor: t(\"bgColor1\"),\n\t\t\ttextColor: t(\"textColor1\"),\n\t\t\tlinkColor: t(\"linkColor1\"),\n\t\t\timage: whatwedoImg1,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: t(\"title2\"),\n\t\t\theading1: t(\"heading3\"),\n\t\t\theading2: t(\"heading4\"),\n\t\t\tpara: t(\"para2\"),\n\t\t\thref: t(\"href2\"),\n\t\t\tbgColor: t(\"bgColor2\"),\n\t\t\ttextColor: t(\"textColor2\"),\n\t\t\tlinkColor: t(\"linkColor2\"),\n\t\t\timage: whatwedoImg2,\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\ttitle: t(\"title3\"),\n\t\t\theading1: t(\"heading5\"),\n\t\t\theading2: t(\"heading6\"),\n\t\t\tpara: t(\"para3\"),\n\t\t\thref: t(\"href3\"),\n\t\t\tbgColor: t(\"bgColor3\"),\n\t\t\ttextColor: t(\"textColor3\"),\n\t\t\tlinkColor: t(\"linkColor3\"),\n\t\t\timage: whatwedoImg3,\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\ttitle: t(\"title4\"),\n\t\t\theading1: t(\"heading7\"),\n\t\t\theading2: t(\"heading8\"),\n\t\t\tpara: t(\"para4\"),\n\t\t\thref: t(\"href4\"),\n\t\t\tbgColor: t(\"bgColor4\"),\n\t\t\ttextColor: t(\"textColor4\"),\n\t\t\tlinkColor: t(\"linkColor4\"),\n\t\t\timage: whatwedoImg4,\n\t\t},\n\t];\n\n\t// Helper function to snap to nearest card\n\tconst snapToCard = useCallback((targetIndex: number) => {\n\t\tif (!containerRef.current || isScrollingRef.current) return;\n\n\t\tconst { width: viewportWidth } = viewportSize;\n\t\tconst { isMobile, isTablet, isLargeDesktop, isUltrawide } = getDeviceInfo(viewportWidth);\n\n\t\t// Calculate scroll distance (same logic as in useEffect)\n\t\tlet scrollMultiplier: number;\n\t\tif (isMobile) {\n\t\t\tscrollMultiplier = 2.5;\n\t\t} else if (isTablet) {\n\t\t\tscrollMultiplier = 3;\n\t\t} else if (isUltrawide) {\n\t\t\tscrollMultiplier = 4;\n\t\t} else if (isLargeDesktop) {\n\t\t\tscrollMultiplier = 3.5;\n\t\t} else {\n\t\t\tscrollMultiplier = 3;\n\t\t}\n\n\t\tconst totalWidth = cardData.length * viewportWidth;\n\t\tconst baseScrollDistance = totalWidth - viewportWidth;\n\t\tconst scrollDistance = baseScrollDistance * scrollMultiplier;\n\n\t\t// Calculate target scroll position\n\t\tconst progress = targetIndex / (cardData.length - 1);\n\t\tconst targetScrollY = containerRef.current.offsetTop + (scrollDistance * progress);\n\n\t\t// Set scrolling flag to prevent conflicts\n\t\tisScrollingRef.current = true;\n\n\t\t// Use native scrollTo for better browser compatibility\n\t\twindow.scrollTo({\n\t\t\ttop: targetScrollY,\n\t\t\tbehavior: 'smooth'\n\t\t});\n\n\t\tsetCurrentCardIndex(targetIndex);\n\n\t\t// Reset scrolling flag after animation\n\t\tsetTimeout(() => {\n\t\t\tisScrollingRef.current = false;\n\t\t}, 1000);\n\t}, [viewportSize, cardData.length]);\n\n\t// Helper function to get device breakpoints\n\tconst getDeviceInfo = (width: number) => {\n\t\treturn {\n\t\t\tisMobile: width <= 768,\n\t\t\tisTablet: width > 768 && width <= 1024,\n\t\t\tisDesktop: width > 1024,\n\t\t\tisLargeDesktop: width > 1440,\n\t\t\tisUltrawide: width > 1920,\n\t\t};\n\t};\n\n\t// Update viewport size\n\tuseEffect(() => {\n\t\tconst updateViewportSize = () => {\n\t\t\tsetViewportSize({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t});\n\t\t};\n\n\t\tupdateViewportSize();\n\t\twindow.addEventListener('resize', updateViewportSize);\n\n\t\treturn () => window.removeEventListener('resize', updateViewportSize);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!containerRef.current || !scrollContainerRef.current || viewportSize.width === 0) return;\n\n\t\tconst container = containerRef.current;\n\t\tconst scrollContainer = scrollContainerRef.current;\n\n\t\tconst setupAnimation = () => {\n\t\t\tconst { width: viewportWidth, height: viewportHeight } = viewportSize;\n\t\t\tconst { isMobile, isTablet, isDesktop, isLargeDesktop, isUltrawide } = getDeviceInfo(viewportWidth);\n\n\t\t\t// Calculate scroll distance based on device type\n\t\t\tlet scrollMultiplier: number;\n\t\t\tlet minScrollDistance: number;\n\n\t\t\tif (isMobile) {\n\t\t\t\tscrollMultiplier = 2.5; // Reduced for mobile\n\t\t\t\tminScrollDistance = viewportWidth * 1.5;\n\t\t\t} else if (isTablet) {\n\t\t\t\tscrollMultiplier = 3;\n\t\t\t\tminScrollDistance = viewportWidth * 2;\n\t\t\t} else if (isUltrawide) {\n\t\t\t\tscrollMultiplier = 4; // More scroll for ultrawide\n\t\t\t\tminScrollDistance = viewportWidth * 3;\n\t\t\t} else if (isLargeDesktop) {\n\t\t\t\tscrollMultiplier = 3.5;\n\t\t\t\tminScrollDistance = viewportWidth * 2.5;\n\t\t\t} else {\n\t\t\t\tscrollMultiplier = 3;\n\t\t\t\tminScrollDistance = viewportWidth * 2;\n\t\t\t}\n\n\t\t\t// Calculate total width and scroll distance\n\t\t\tconst totalWidth = cardData.length * viewportWidth;\n\t\t\tconst baseScrollDistance = totalWidth - viewportWidth;\n\t\t\tconst scrollDistance = Math.max(baseScrollDistance * scrollMultiplier, minScrollDistance);\n\n\t\t\t// Set container height based on device\n\t\t\tconst containerHeight = isMobile ? '100svh' : '100vh';\n\n\t\t\t// Set up horizontal scroll container\n\t\t\tgsap.set(scrollContainer, {\n\t\t\t\twidth: totalWidth,\n\t\t\t\theight: containerHeight,\n\t\t\t});\n\n\t\t\t// Clean up existing ScrollTriggers\n\t\t\tScrollTrigger.getAll().forEach(trigger => trigger.kill());\n\t\t\t\n\t\t\t// Clear any pending timeouts\n\t\t\tif (snapTimeoutRef.current) {\n\t\t\t\tclearTimeout(snapTimeoutRef.current);\n\t\t\t}\n\n\t\t\t// Create horizontal scroll timeline\n\t\t\tconst horizontalTl = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: container,\n\t\t\t\t\tstart: \"top top\",\n\t\t\t\t\tend: () => `+=${scrollDistance}`,\n\t\t\t\t\tscrub: 1.2,\n\t\t\t\t\tpin: true,\n\t\t\t\t\tanticipatePin: 1,\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\trefreshPriority: -1,\n\t\t\t\t\tonUpdate: (self) => {\n\t\t\t\t\t\t// Only update current card index, no snapping during scroll\n\t\t\t\t\t\tif (!isScrollingRef.current) {\n\t\t\t\t\t\t\tconst progress = self.progress;\n\t\t\t\t\t\t\tconst cardIndex = Math.round(progress * (cardData.length - 1));\n\t\t\t\t\t\t\tif (cardIndex !== currentCardIndex) {\n\t\t\t\t\t\t\t\tsetCurrentCardIndex(cardIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Animate horizontal movement with easing\n\t\t\thorizontalTl.to(scrollContainer, {\n\t\t\t\tx: -baseScrollDistance,\n\t\t\t\tease: \"none\",\n\t\t\t});\n\n\t\t\treturn horizontalTl;\n\t\t};\n\n\t\tconst horizontalTl = setupAnimation();\n\n\t\t// Set up individual card animations\n\t\tcardsRef.current.forEach((card, index) => {\n\t\t\tif (!card) return;\n\n\t\t\tconst content = contentRefs.current[index];\n\t\t\tconst image = imageRefs.current[index];\n\t\t\tconst parallaxElement = parallaxRefs.current[index];\n\n\t\t\t// Initial setup - hide elements\n\t\t\tgsap.set([content, image], {\n\t\t\t\topacity: 0,\n\t\t\t\ty: 50,\n\t\t\t});\n\n\t\t\tif (content) {\n\t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n\t\t\t\tgsap.set(textElements, {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\ty: 30,\n\t\t\t\t\tx: -20,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (image) {\n\t\t\t\tgsap.set(image, {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\tscale: 0.9,\n\t\t\t\t\trotation: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Create reveal animation for each card with snap detection\n\t\t\tconst cardTl = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: card,\n\t\t\t\t\tstart: \"left 75%\",\n\t\t\t\t\tend: \"left 25%\",\n\t\t\t\t\tscrub: 1.5,\n\t\t\t\t\thorizontal: true,\n\t\t\t\t\tcontainerAnimation: horizontalTl,\n\t\t\t\t\tonEnter: () => {\n\t\t\t\t\t\t// Card is entering viewport - update current index\n\t\t\t\t\t\tif (!isScrollingRef.current) {\n\t\t\t\t\t\t\tsetCurrentCardIndex(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\t// Card is leaving viewport\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: () => {\n\t\t\t\t\t\t// Card is re-entering from the right\n\t\t\t\t\t\tif (!isScrollingRef.current) {\n\t\t\t\t\t\t\tsetCurrentCardIndex(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\t// Card is leaving back to the left\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Animate content reveal\n\t\t\tif (content) {\n\t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n\t\t\t\tcardTl\n\t\t\t\t\t.to(content, {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\tease: \"power2.out\",\n\t\t\t\t\t}, 0)\n\t\t\t\t\t.to(textElements, {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\tduration: 0.6,\n\t\t\t\t\t\tstagger: 0.08,\n\t\t\t\t\t\tease: \"power2.out\",\n\t\t\t\t\t}, 0.2);\n\t\t\t}\n\n\t\t\t// Animate image reveal\n\t\t\tif (image) {\n\t\t\t\tcardTl.to(image, {\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tscale: 1,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tduration: 1.2,\n\t\t\t\t\tease: \"back.out(1.2)\",\n\t\t\t\t}, 0.4);\n\t\t\t}\n\n\t\t\t// Subtle parallax effect for background elements\n\t\t\tif (parallaxElement) {\n\t\t\t\tgsap.to(parallaxElement, {\n\t\t\t\t\tx: -30,\n\t\t\t\t\tscrollTrigger: {\n\t\t\t\t\t\ttrigger: card,\n\t\t\t\t\t\tstart: \"left right\",\n\t\t\t\t\t\tend: \"right left\",\n\t\t\t\t\t\tscrub: 2.5,\n\t\t\t\t\t\thorizontal: true,\n\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Image parallax effect\n\t\t\tif (image) {\n\t\t\t\tgsap.to(image, {\n\t\t\t\t\tx: 15,\n\t\t\t\t\tscrollTrigger: {\n\t\t\t\t\t\ttrigger: card,\n\t\t\t\t\t\tstart: \"left right\",\n\t\t\t\t\t\tend: \"right left\",\n\t\t\t\t\t\tscrub: 3.5,\n\t\t\t\t\t\thorizontal: true,\n\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Set loaded state\n\t\tconst loadTimeout = setTimeout(() => setIsLoaded(true), 150);\n\n\t\treturn () => {\n\t\t\tclearTimeout(loadTimeout);\n\t\t\tif (snapTimeoutRef.current) {\n\t\t\t\tclearTimeout(snapTimeoutRef.current);\n\t\t\t}\n\t\t\tScrollTrigger.getAll().forEach(trigger => trigger.kill());\n\t\t};\n\t}, [cardData.length, viewportSize]);\n\n\t// Improved scroll to card function\n\tconst scrollToCard = (index: number) => {\n\t\tif (!containerRef.current) return;\n\n\t\tconst { width: viewportWidth } = viewportSize;\n\t\tconst { isMobile, isTablet, isLargeDesktop, isUltrawide } = getDeviceInfo(viewportWidth);\n\n\t\t// Calculate scroll distance (same logic as in useEffect)\n\t\tlet scrollMultiplier: number;\n\t\tif (isMobile) {\n\t\t\tscrollMultiplier = 2.5;\n\t\t} else if (isTablet) {\n\t\t\tscrollMultiplier = 3;\n\t\t} else if (isUltrawide) {\n\t\t\tscrollMultiplier = 4;\n\t\t} else if (isLargeDesktop) {\n\t\t\tscrollMultiplier = 3.5;\n\t\t} else {\n\t\t\tscrollMultiplier = 3;\n\t\t}\n\n\t\tconst totalWidth = cardData.length * viewportWidth;\n\t\tconst baseScrollDistance = totalWidth - viewportWidth;\n\t\tconst scrollDistance = baseScrollDistance * scrollMultiplier;\n\n\t\t// Calculate target scroll position\n\t\tconst progress = index / (cardData.length - 1);\n\t\tconst targetScrollY = containerRef.current.offsetTop + (scrollDistance * progress);\n\n\t\t// Use native scrollTo for better browser compatibility\n\t\twindow.scrollTo({\n\t\t\ttop: targetScrollY,\n\t\t\tbehavior: 'smooth'\n\t\t});\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"w-full min-h-screen relative overflow-hidden\"\n\t\t\tref={containerRef}>\n\n\t\t\t{/* Horizontal Scroll Container */}\n\t\t\t<div\n\t\t\t\tref={scrollContainerRef}\n\t\t\t\tclassName=\"flex h-full\">\n\n\t\t\t\t{cardData.map((card, index) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\tif (el) cardsRef.current[index] = el;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"w-screen h-full flex-shrink-0 relative flex items-center justify-center\"\n\t\t\t\t\t\tstyle={{ backgroundColor: card.bgColor }}\n\t\t\t\t\t>\n\n\t\t\t\t\t\t{/* Parallax Background Element */}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\tif (el) parallaxRefs.current[index] = el;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 opacity-10\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackground: `radial-gradient(circle at 30% 70%, ${card.linkColor}40 0%, transparent 50%)`\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Card Content */}\n\t\t\t\t\t\t<div className=\"w-full max-w-7xl h-full flex items-center justify-between gap-8 px-6\n\t\t\t\t\t\t\txm:flex-col xm:justify-center xm:gap-6 xm:px-4 xm:py-8\n\t\t\t\t\t\t\tsm:flex-col sm:justify-center sm:gap-8 sm:px-6 sm:py-8\n\t\t\t\t\t\t\tmd:gap-12 md:px-8\n\t\t\t\t\t\t\tlg:gap-16 lg:px-12\n\t\t\t\t\t\t\txl:gap-20 xl:px-16\n\t\t\t\t\t\t\t2xl:gap-24 2xl:px-20\n\t\t\t\t\t\t\trelative z-10\">\n\n\t\t\t\t\t\t\t{/* Content Section */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\t\tif (el) contentRefs.current[index] = el;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName=\"w-1/2 flex flex-col justify-center gap-8\n\t\t\t\t\t\t\t\t\txm:w-full xm:gap-4 xm:text-center xm:px-2\n\t\t\t\t\t\t\t\t\tsm:w-full sm:gap-6 sm:text-center sm:px-4\n\t\t\t\t\t\t\t\t\tmd:gap-8 md:px-6\n\t\t\t\t\t\t\t\t\tlg:gap-10 lg:px-8\n\t\t\t\t\t\t\t\t\txl:gap-12\">\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-4 xm:gap-3 sm:gap-4 md:gap-5 lg:gap-6\">\n\t\t\t\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-2xl leading-tight tracking-tighter opacity-80\n\t\t\t\t\t\t\t\t\t\t\txm:text-lg xm:leading-snug\n\t\t\t\t\t\t\t\t\t\t\tsm:text-xl sm:leading-tight\n\t\t\t\t\t\t\t\t\t\t\tmd:text-2xl\n\t\t\t\t\t\t\t\t\t\t\tlg:text-3xl\n\t\t\t\t\t\t\t\t\t\t\txl:text-4xl\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{card.title}\n\t\t\t\t\t\t\t\t\t</h4>\n\n\t\t\t\t\t\t\t\t\t<h2\n\t\t\t\t\t\t\t\t\t\tclassName=\"font-bold leading-tight tracking-tighter\n\t\t\t\t\t\t\t\t\t\t\ttext-4xl xm:text-3xl\n\t\t\t\t\t\t\t\t\t\t\tsm:text-4xl\n\t\t\t\t\t\t\t\t\t\t\tmd:text-5xl\n\t\t\t\t\t\t\t\t\t\t\tlg:text-6xl\n\t\t\t\t\t\t\t\t\t\t\txl:text-7xl\n\t\t\t\t\t\t\t\t\t\t\t2xl:text-8xl\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n\t\t\t\t\t\t\t\t\t\t{card.heading1}\n\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t{card.heading2}\n\t\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\t\tclassName=\"leading-relaxed tracking-tight max-w-lg\n\t\t\t\t\t\t\t\t\t\t\ttext-base xm:text-sm xm:max-w-none xm:leading-relaxed\n\t\t\t\t\t\t\t\t\t\t\tsm:text-base sm:max-w-none sm:leading-relaxed\n\t\t\t\t\t\t\t\t\t\t\tmd:text-lg md:max-w-xl\n\t\t\t\t\t\t\t\t\t\t\tlg:text-xl lg:max-w-2xl\n\t\t\t\t\t\t\t\t\t\t\txl:text-2xl\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n\t\t\t\t\t\t\t\t\t\t{card.para}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"w-fit flex flex-col gap-2\n\t\t\t\t\t\t\t\t\txm:w-full xm:items-center\n\t\t\t\t\t\t\t\t\tsm:w-full sm:items-center\n\t\t\t\t\t\t\t\t\tmd:w-fit\">\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.linkColor }}\n\t\t\t\t\t\t\t\t\t\tclassName=\"font-medium leading-tight tracking-tight hover:opacity-80 transition-opacity duration-300 relative group\n\t\t\t\t\t\t\t\t\t\t\ttext-base xm:text-sm\n\t\t\t\t\t\t\t\t\t\t\tsm:text-base\n\t\t\t\t\t\t\t\t\t\t\tmd:text-lg\n\t\t\t\t\t\t\t\t\t\t\tlg:text-xl\"\n\t\t\t\t\t\t\t\t\t\thref={card.href}>\n\t\t\t\t\t\t\t\t\t\t{card.href}\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-current transition-all duration-300 group-hover:w-full\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: card.linkColor }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* Image Section */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\t\tif (el) imageRefs.current[index] = el;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName=\"w-1/2 flex items-center justify-center p-8\n\t\t\t\t\t\t\t\t\txm:w-full xm:p-4\n\t\t\t\t\t\t\t\t\tsm:w-full sm:p-6\n\t\t\t\t\t\t\t\t\tmd:p-8\n\t\t\t\t\t\t\t\t\tlg:p-10\n\t\t\t\t\t\t\t\t\txl:p-12\">\n\n\t\t\t\t\t\t\t\t<div className=\"relative w-full max-w-md\n\t\t\t\t\t\t\t\t\txm:max-w-xs\n\t\t\t\t\t\t\t\t\tsm:max-w-sm\n\t\t\t\t\t\t\t\t\tmd:max-w-md\n\t\t\t\t\t\t\t\t\tlg:max-w-lg\n\t\t\t\t\t\t\t\t\txl:max-w-xl\n\t\t\t\t\t\t\t\t\t2xl:max-w-2xl\">\n\n\t\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\t\tsrc={card.image}\n\t\t\t\t\t\t\t\t\t\talt={card.title}\n\t\t\t\t\t\t\t\t\t\tclassName=\"relative w-full h-auto object-contain rounded-2xl transition-transform duration-300 hover:scale-105\"\n\t\t\t\t\t\t\t\t\t\tpriority={index === 0}\n\t\t\t\t\t\t\t\t\t\tsizes=\"(max-width: 768px) 90vw, (max-width: 1024px) 50vw, 40vw\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t{/* Card Indicators */}\n\t\t\t<div className=\"fixed right-8 top-1/2 transform -translate-y-1/2 z-50 flex flex-col gap-3\n\t\t\t\txm:right-4 xm:gap-2 sm:right-6 sm:gap-2\">\n\t\t\t\t{cardData.map((_, index) => (\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tonClick={() => snapToCard(index)}\n\t\t\t\t\t\tclassName={`w-3 h-3 rounded-full transition-all duration-300 border-2 border-white/30\n\t\t\t\t\t\t\txm:w-2 xm:h-2 sm:w-2.5 sm:h-2.5\n\t\t\t\t\t\t\t${currentCardIndex === index\n\t\t\t\t\t\t\t? 'bg-white/80 border-white/80 scale-125'\n\t\t\t\t\t\t\t: 'bg-white/20 hover:bg-white/40 hover:border-white/50'\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\taria-label={`Go to card ${index + 1}`}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}",
                    "language": "typescript jsx"
                },
                "codebaseEnabled": false
            },
            "createdAt": 1750491270187,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "this is very glitchy when on mobile devices"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "a594da67-e009-446c-b2ee-050cedacda94",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'll help you fix the mobile glitches in the wwd-cards.tsx file. Let me first read the current state of the file to understand the issues."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JgEWSB2GgSQpE5ctgXNFhE",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me see the rest of the file to understand the complete structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01NVFZtGk5SyHipsEC9f64uu",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I can see the complete file. Looking at the code, I can identify several potential issues that could cause glitches on mobile devices:\n\n1. **Complex GSAP animations with heavy scrub values**\n2. **Multiple ScrollTrigger instances with horizontal scrolling**\n3. **Parallax effects that might be too intensive for mobile**\n4. **Viewport height issues with `100svh` vs `100vh`**\n5. **Touch scrolling conflicts with GSAP ScrollTrigger**\n6. **Performance issues with multiple simultaneous animations**\n\nLet me create an optimized version that addresses these mobile-specific issues:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01PvcXVJC1D1J2oLnH4yFZpb",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -40,10 +40,12 @@\n \tconst [isLoaded, setIsLoaded] = useState(false);\n \tconst [viewportSize, setViewportSize] = useState({ width: 0, height: 0 });\n \tconst [currentCardIndex, setCurrentCardIndex] = useState(0);\n+\tconst [isMobileDevice, setIsMobileDevice] = useState(false);\n \tconst snapTimeoutRef = useRef<NodeJS.Timeout>();\n \tconst isScrollingRef = useRef(false);\n \tconst lastScrollY = useRef(0);\n \tconst scrollDirection = useRef<'up' | 'down'>('down');\n+\tconst resizeTimeoutRef = useRef<NodeJS.Timeout>();\n \tconst t = useTranslations(\"whatwedoContent\");\n \n \tconst cardData: CardData[] = [",
                    "refToolCallId": "toolu_01PvcXVJC1D1J2oLnH4yFZpb"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01CAzX4p2DnPpUtw5bVJGecA",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -156,19 +156,38 @@\n \t\t};\n \t};\n \n-\t// Update viewport size\n+\t// Update viewport size with debouncing for better mobile performance\n \tuseEffect(() => {\n \t\tconst updateViewportSize = () => {\n-\t\t\tsetViewportSize({\n-\t\t\t\twidth: window.innerWidth,\n-\t\t\t\theight: window.innerHeight,\n-\t\t\t});\n+\t\t\t// Clear existing timeout\n+\t\t\tif (resizeTimeoutRef.current) {\n+\t\t\t\tclearTimeout(resizeTimeoutRef.current);\n+\t\t\t}\n+\n+\t\t\t// Debounce resize events for better performance\n+\t\t\tresizeTimeoutRef.current = setTimeout(() => {\n+\t\t\t\tconst width = window.innerWidth;\n+\t\t\t\tconst height = window.innerHeight;\n+\t\t\t\t\n+\t\t\t\tsetViewportSize({ width, height });\n+\t\t\t\t\n+\t\t\t\t// Detect mobile device more accurately\n+\t\t\t\tconst isMobile = width <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n+\t\t\t\tsetIsMobileDevice(isMobile);\n+\t\t\t}, 150);\n \t\t};\n \n \t\tupdateViewportSize();\n \t\twindow.addEventListener('resize', updateViewportSize);\n-\n-\t\treturn () => window.removeEventListener('resize', updateViewportSize);\n+\t\twindow.addEventListener('orientationchange', updateViewportSize);\n+\n+\t\treturn () => {\n+\t\t\twindow.removeEventListener('resize', updateViewportSize);\n+\t\t\twindow.removeEventListener('orientationchange', updateViewportSize);\n+\t\t\tif (resizeTimeoutRef.current) {\n+\t\t\t\tclearTimeout(resizeTimeoutRef.current);\n+\t\t\t}\n+\t\t};\n \t}, []);\n \n \tuseEffect(() => {",
                    "refToolCallId": "toolu_01CAzX4p2DnPpUtw5bVJGecA"
                },
                {
                    "type": "text",
                    "text": "Now let me optimize the main animation setup for better mobile performance:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_019Ki9rFuYbqgpUY6Bdn7Rvr",
                    "title": "",
                    "statusText": "Text to replace not found",
                    "status": "WARNING",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check the exact content around the setupAnimation function:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01DVSckVMpuFdZMwSKZgPhQ2",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I can make the replacement with the correct indentation:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01N69ovyt1pgPF8WZkHcX5eX",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -200,25 +200,31 @@\n \t\t\tconst { width: viewportWidth, height: viewportHeight } = viewportSize;\n \t\t\tconst { isMobile, isTablet, isDesktop, isLargeDesktop, isUltrawide } = getDeviceInfo(viewportWidth);\n \n-\t\t\t// Calculate scroll distance based on device type\n+\t\t\t// Calculate scroll distance based on device type with mobile optimizations\n \t\t\tlet scrollMultiplier: number;\n \t\t\tlet minScrollDistance: number;\n+\t\t\tlet scrubValue: number;\n \n \t\t\tif (isMobile) {\n-\t\t\t\tscrollMultiplier = 2.5; // Reduced for mobile\n-\t\t\t\tminScrollDistance = viewportWidth * 1.5;\n+\t\t\t\tscrollMultiplier = 2; // Further reduced for mobile\n+\t\t\t\tminScrollDistance = viewportWidth * 1.2;\n+\t\t\t\tscrubValue = 0.8; // Lighter scrub for mobile\n \t\t\t} else if (isTablet) {\n-\t\t\t\tscrollMultiplier = 3;\n-\t\t\t\tminScrollDistance = viewportWidth * 2;\n+\t\t\t\tscrollMultiplier = 2.5;\n+\t\t\t\tminScrollDistance = viewportWidth * 1.8;\n+\t\t\t\tscrubValue = 1;\n \t\t\t} else if (isUltrawide) {\n-\t\t\t\tscrollMultiplier = 4; // More scroll for ultrawide\n+\t\t\t\tscrollMultiplier = 4;\n \t\t\t\tminScrollDistance = viewportWidth * 3;\n+\t\t\t\tscrubValue = 1.2;\n \t\t\t} else if (isLargeDesktop) {\n \t\t\t\tscrollMultiplier = 3.5;\n \t\t\t\tminScrollDistance = viewportWidth * 2.5;\n+\t\t\t\tscrubValue = 1.2;\n \t\t\t} else {\n \t\t\t\tscrollMultiplier = 3;\n \t\t\t\tminScrollDistance = viewportWidth * 2;\n+\t\t\t\tscrubValue = 1.2;\n \t\t\t}\n \n \t\t\t// Calculate total width and scroll distance\n@@ -226,13 +232,14 @@\n \t\t\tconst baseScrollDistance = totalWidth - viewportWidth;\n \t\t\tconst scrollDistance = Math.max(baseScrollDistance * scrollMultiplier, minScrollDistance);\n \n-\t\t\t// Set container height based on device\n-\t\t\tconst containerHeight = isMobile ? '100svh' : '100vh';\n-\n-\t\t\t// Set up horizontal scroll container\n+\t\t\t// Set container height with better mobile support\n+\t\t\tconst containerHeight = isMobile ? '100dvh' : '100vh';\n+\n+\t\t\t// Set up horizontal scroll container with mobile optimizations\n \t\t\tgsap.set(scrollContainer, {\n \t\t\t\twidth: totalWidth,\n \t\t\t\theight: containerHeight,\n+\t\t\t\twillChange: isMobile ? 'transform' : 'auto', // Optimize for mobile\n \t\t\t});\n \n \t\t\t// Clean up existing ScrollTriggers\n@@ -243,19 +250,21 @@\n \t\t\t\tclearTimeout(snapTimeoutRef.current);\n \t\t\t}\n \n-\t\t\t// Create horizontal scroll timeline\n+\t\t\t// Create horizontal scroll timeline with mobile optimizations\n \t\t\tconst horizontalTl = gsap.timeline({\n \t\t\t\tscrollTrigger: {\n \t\t\t\t\ttrigger: container,\n \t\t\t\t\tstart: \"top top\",\n \t\t\t\t\tend: () => `+=${scrollDistance}`,\n-\t\t\t\t\tscrub: 1.2,\n+\t\t\t\t\tscrub: scrubValue,\n \t\t\t\t\tpin: true,\n-\t\t\t\t\tanticipatePin: 1,\n+\t\t\t\t\tanticipatePin: isMobile ? 0 : 1, // Reduce anticipatePin for mobile\n \t\t\t\t\tinvalidateOnRefresh: true,\n \t\t\t\t\trefreshPriority: -1,\n+\t\t\t\t\tfastScrollEnd: isMobile ? true : false, // Better mobile scroll handling\n+\t\t\t\t\tpreventOverlaps: isMobile ? true : false,\n \t\t\t\t\tonUpdate: (self) => {\n-\t\t\t\t\t\t// Only update current card index, no snapping during scroll\n+\t\t\t\t\t\t// Throttle updates for better mobile performance\n \t\t\t\t\t\tif (!isScrollingRef.current) {\n \t\t\t\t\t\t\tconst progress = self.progress;\n \t\t\t\t\t\t\tconst cardIndex = Math.round(progress * (cardData.length - 1));\n@@ -267,10 +276,11 @@\n \t\t\t\t},\n \t\t\t});\n \n-\t\t\t// Animate horizontal movement with easing\n+\t\t\t// Animate horizontal movement with mobile-optimized easing\n \t\t\thorizontalTl.to(scrollContainer, {\n \t\t\t\tx: -baseScrollDistance,\n \t\t\t\tease: \"none\",\n+\t\t\t\tforce3D: true, // Hardware acceleration\n \t\t\t});\n \n \t\t\treturn horizontalTl;",
                    "refToolCallId": "toolu_01N69ovyt1pgPF8WZkHcX5eX"
                },
                {
                    "type": "text",
                    "text": "Now let me optimize the individual card animations for better mobile performance:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01FLLFZjzURHZN1FoYHJNyiz",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01EfPkVKA4N34W8HXWoR9x5L",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me optimize the card animations for mobile:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ToKuAU7t4eyrZef4JyHGFX",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -288,44 +288,48 @@\n \n \t\tconst horizontalTl = setupAnimation();\n \n-\t\t// Set up individual card animations\n+\t\t// Set up individual card animations with mobile optimizations\n \t\tcardsRef.current.forEach((card, index) => {\n \t\t\tif (!card) return;\n \n \t\t\tconst content = contentRefs.current[index];\n \t\t\tconst image = imageRefs.current[index];\n \t\t\tconst parallaxElement = parallaxRefs.current[index];\n-\n-\t\t\t// Initial setup - hide elements\n+\t\t\tconst { isMobile } = getDeviceInfo(viewportSize.width);\n+\n+\t\t\t// Initial setup - hide elements with mobile-friendly values\n \t\t\tgsap.set([content, image], {\n \t\t\t\topacity: 0,\n-\t\t\t\ty: 50,\n+\t\t\t\ty: isMobile ? 30 : 50, // Reduced movement for mobile\n+\t\t\t\tforce3D: true,\n \t\t\t});\n \n \t\t\tif (content) {\n \t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n \t\t\t\tgsap.set(textElements, {\n \t\t\t\t\topacity: 0,\n-\t\t\t\t\ty: 30,\n-\t\t\t\t\tx: -20,\n+\t\t\t\t\ty: isMobile ? 20 : 30,\n+\t\t\t\t\tx: isMobile ? -10 : -20, // Reduced movement for mobile\n+\t\t\t\t\tforce3D: true,\n \t\t\t\t});\n \t\t\t}\n \n \t\t\tif (image) {\n \t\t\t\tgsap.set(image, {\n \t\t\t\t\topacity: 0,\n-\t\t\t\t\tscale: 0.9,\n+\t\t\t\t\tscale: isMobile ? 0.95 : 0.9, // Less dramatic scale for mobile\n \t\t\t\t\trotation: 0,\n+\t\t\t\t\tforce3D: true,\n \t\t\t\t});\n \t\t\t}\n \n-\t\t\t// Create reveal animation for each card with snap detection\n+\t\t\t// Create reveal animation for each card with mobile-optimized scrub\n \t\t\tconst cardTl = gsap.timeline({\n \t\t\t\tscrollTrigger: {\n \t\t\t\t\ttrigger: card,\n \t\t\t\t\tstart: \"left 75%\",\n \t\t\t\t\tend: \"left 25%\",\n-\t\t\t\t\tscrub: 1.5,\n+\t\t\t\t\tscrub: isMobile ? 1 : 1.5, // Lighter scrub for mobile\n \t\t\t\t\thorizontal: true,\n \t\t\t\t\tcontainerAnimation: horizontalTl,\n \t\t\t\t\tonEnter: () => {\n@@ -349,65 +353,71 @@\n \t\t\t\t}\n \t\t\t});\n \n-\t\t\t// Animate content reveal\n+\t\t\t// Animate content reveal with mobile optimizations\n \t\t\tif (content) {\n \t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n \t\t\t\tcardTl\n \t\t\t\t\t.to(content, {\n \t\t\t\t\t\topacity: 1,\n \t\t\t\t\t\ty: 0,\n-\t\t\t\t\t\tduration: 0.8,\n+\t\t\t\t\t\tduration: isMobile ? 0.6 : 0.8, // Faster for mobile\n \t\t\t\t\t\tease: \"power2.out\",\n+\t\t\t\t\t\tforce3D: true,\n \t\t\t\t\t}, 0)\n \t\t\t\t\t.to(textElements, {\n \t\t\t\t\t\topacity: 1,\n \t\t\t\t\t\ty: 0,\n \t\t\t\t\t\tx: 0,\n-\t\t\t\t\t\tduration: 0.6,\n-\t\t\t\t\t\tstagger: 0.08,\n+\t\t\t\t\t\tduration: isMobile ? 0.4 : 0.6,\n+\t\t\t\t\t\tstagger: isMobile ? 0.05 : 0.08, // Reduced stagger for mobile\n \t\t\t\t\t\tease: \"power2.out\",\n-\t\t\t\t\t}, 0.2);\n-\t\t\t}\n-\n-\t\t\t// Animate image reveal\n+\t\t\t\t\t\tforce3D: true,\n+\t\t\t\t\t}, 0.1);\n+\t\t\t}\n+\n+\t\t\t// Animate image reveal with mobile optimizations\n \t\t\tif (image) {\n \t\t\t\tcardTl.to(image, {\n \t\t\t\t\topacity: 1,\n \t\t\t\t\tscale: 1,\n \t\t\t\t\trotation: 0,\n-\t\t\t\t\tduration: 1.2,\n-\t\t\t\t\tease: \"back.out(1.2)\",\n-\t\t\t\t}, 0.4);\n-\t\t\t}\n-\n-\t\t\t// Subtle parallax effect for background elements\n-\t\t\tif (parallaxElement) {\n-\t\t\t\tgsap.to(parallaxElement, {\n-\t\t\t\t\tx: -30,\n-\t\t\t\t\tscrollTrigger: {\n-\t\t\t\t\t\ttrigger: card,\n-\t\t\t\t\t\tstart: \"left right\",\n-\t\t\t\t\t\tend: \"right left\",\n-\t\t\t\t\t\tscrub: 2.5,\n-\t\t\t\t\t\thorizontal: true,\n-\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\t// Image parallax effect\n-\t\t\tif (image) {\n-\t\t\t\tgsap.to(image, {\n-\t\t\t\t\tx: 15,\n-\t\t\t\t\tscrollTrigger: {\n-\t\t\t\t\t\ttrigger: card,\n-\t\t\t\t\t\tstart: \"left right\",\n-\t\t\t\t\t\tend: \"right left\",\n-\t\t\t\t\t\tscrub: 3.5,\n-\t\t\t\t\t\thorizontal: true,\n-\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t\t\tduration: isMobile ? 0.8 : 1.2, // Faster for mobile\n+\t\t\t\t\tease: isMobile ? \"power2.out\" : \"back.out(1.2)\", // Simpler easing for mobile\n+\t\t\t\t\tforce3D: true,\n+\t\t\t\t}, 0.3);\n+\t\t\t}\n+\n+\t\t\t// Disable parallax effects on mobile for better performance\n+\t\t\tif (!isMobile) {\n+\t\t\t\t// Subtle parallax effect for background elements (desktop only)\n+\t\t\t\tif (parallaxElement) {\n+\t\t\t\t\tgsap.to(parallaxElement, {\n+\t\t\t\t\t\tx: -30,\n+\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\tstart: \"left right\",\n+\t\t\t\t\t\t\tend: \"right left\",\n+\t\t\t\t\t\t\tscrub: 2.5,\n+\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\n+\t\t\t\t// Image parallax effect (desktop only)\n+\t\t\t\tif (image) {\n+\t\t\t\t\tgsap.to(image, {\n+\t\t\t\t\t\tx: 15,\n+\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\tstart: \"left right\",\n+\t\t\t\t\t\t\tend: \"right left\",\n+\t\t\t\t\t\t\tscrub: 3.5,\n+\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n \t\t\t}\n \t\t});\n ",
                    "refToolCallId": "toolu_01ToKuAU7t4eyrZef4JyHGFX"
                },
                {
                    "type": "text",
                    "text": "Now let me also optimize the snap functions for mobile:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01E233nkx2k76dR8n5De9wHg",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -99,19 +99,19 @@\n \t\t},\n \t];\n \n-\t// Helper function to snap to nearest card\n+\t// Helper function to snap to nearest card with mobile optimizations\n \tconst snapToCard = useCallback((targetIndex: number) => {\n \t\tif (!containerRef.current || isScrollingRef.current) return;\n \n \t\tconst { width: viewportWidth } = viewportSize;\n \t\tconst { isMobile, isTablet, isLargeDesktop, isUltrawide } = getDeviceInfo(viewportWidth);\n \n-\t\t// Calculate scroll distance (same logic as in useEffect)\n+\t\t// Calculate scroll distance (same logic as in useEffect) with mobile optimizations\n \t\tlet scrollMultiplier: number;\n \t\tif (isMobile) {\n+\t\t\tscrollMultiplier = 2; // Further reduced for mobile\n+\t\t} else if (isTablet) {\n \t\t\tscrollMultiplier = 2.5;\n-\t\t} else if (isTablet) {\n-\t\t\tscrollMultiplier = 3;\n \t\t} else if (isUltrawide) {\n \t\t\tscrollMultiplier = 4;\n \t\t} else if (isLargeDesktop) {\n@@ -131,18 +131,18 @@\n \t\t// Set scrolling flag to prevent conflicts\n \t\tisScrollingRef.current = true;\n \n-\t\t// Use native scrollTo for better browser compatibility\n+\t\t// Use native scrollTo with mobile-optimized behavior\n \t\twindow.scrollTo({\n \t\t\ttop: targetScrollY,\n-\t\t\tbehavior: 'smooth'\n+\t\t\tbehavior: isMobile ? 'auto' : 'smooth' // Instant scroll on mobile to avoid conflicts\n \t\t});\n \n \t\tsetCurrentCardIndex(targetIndex);\n \n-\t\t// Reset scrolling flag after animation\n+\t\t// Reset scrolling flag after animation (shorter timeout for mobile)\n \t\tsetTimeout(() => {\n \t\t\tisScrollingRef.current = false;\n-\t\t}, 1000);\n+\t\t}, isMobile ? 500 : 1000);\n \t}, [viewportSize, cardData.length]);\n \n \t// Helper function to get device breakpoints",
                    "refToolCallId": "toolu_01E233nkx2k76dR8n5De9wHg"
                },
                {
                    "type": "text",
                    "text": "Now let me also optimize the scrollToCard function:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_018NW9bBDuNx4VeyTi2pgSuv",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -433,19 +433,19 @@\n \t\t};\n \t}, [cardData.length, viewportSize]);\n \n-\t// Improved scroll to card function\n+\t// Improved scroll to card function with mobile optimizations\n \tconst scrollToCard = (index: number) => {\n \t\tif (!containerRef.current) return;\n \n \t\tconst { width: viewportWidth } = viewportSize;\n \t\tconst { isMobile, isTablet, isLargeDesktop, isUltrawide } = getDeviceInfo(viewportWidth);\n \n-\t\t// Calculate scroll distance (same logic as in useEffect)\n+\t\t// Calculate scroll distance (same logic as in useEffect) with mobile optimizations\n \t\tlet scrollMultiplier: number;\n \t\tif (isMobile) {\n+\t\t\tscrollMultiplier = 2; // Further reduced for mobile\n+\t\t} else if (isTablet) {\n \t\t\tscrollMultiplier = 2.5;\n-\t\t} else if (isTablet) {\n-\t\t\tscrollMultiplier = 3;\n \t\t} else if (isUltrawide) {\n \t\t\tscrollMultiplier = 4;\n \t\t} else if (isLargeDesktop) {\n@@ -462,10 +462,10 @@\n \t\tconst progress = index / (cardData.length - 1);\n \t\tconst targetScrollY = containerRef.current.offsetTop + (scrollDistance * progress);\n \n-\t\t// Use native scrollTo for better browser compatibility\n+\t\t// Use native scrollTo with mobile-optimized behavior\n \t\twindow.scrollTo({\n \t\t\ttop: targetScrollY,\n-\t\t\tbehavior: 'smooth'\n+\t\t\tbehavior: isMobile ? 'auto' : 'smooth' // Instant scroll on mobile to avoid conflicts\n \t\t});\n \t};\n ",
                    "refToolCallId": "toolu_018NW9bBDuNx4VeyTi2pgSuv"
                },
                {
                    "type": "text",
                    "text": "Now let me add some additional mobile-specific optimizations to the main container and add touch-friendly styles:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_011A7oyX8A4yyhJXimeoutP1",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -472,7 +472,14 @@\n \treturn (\n \t\t<div\n \t\t\tclassName=\"w-full min-h-screen relative overflow-hidden\"\n-\t\t\tref={containerRef}>\n+\t\t\tref={containerRef}\n+\t\t\tstyle={{\n+\t\t\t\t// Mobile-specific optimizations\n+\t\t\t\tWebkitOverflowScrolling: 'touch',\n+\t\t\t\ttouchAction: isMobileDevice ? 'pan-y' : 'auto',\n+\t\t\t\tWebkitTransform: 'translateZ(0)', // Force hardware acceleration\n+\t\t\t\ttransform: 'translateZ(0)',\n+\t\t\t}}>\n \n \t\t\t{/* Horizontal Scroll Container */}\n \t\t\t<div",
                    "refToolCallId": "toolu_011A7oyX8A4yyhJXimeoutP1"
                },
                {
                    "type": "text",
                    "text": "Now let me also optimize the horizontal scroll container:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01BETNMyUaxHm3Y1zefWkV61",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -484,7 +484,13 @@\n \t\t\t{/* Horizontal Scroll Container */}\n \t\t\t<div\n \t\t\t\tref={scrollContainerRef}\n-\t\t\t\tclassName=\"flex h-full\">\n+\t\t\t\tclassName=\"flex h-full\"\n+\t\t\t\tstyle={{\n+\t\t\t\t\t// Mobile performance optimizations\n+\t\t\t\t\twillChange: isMobileDevice ? 'transform' : 'auto',\n+\t\t\t\t\tWebkitTransform: 'translateZ(0)',\n+\t\t\t\t\ttransform: 'translateZ(0)',\n+\t\t\t\t}}>\n \n \t\t\t\t{cardData.map((card, index) => (\n \t\t\t\t\t<div",
                    "refToolCallId": "toolu_01BETNMyUaxHm3Y1zefWkV61"
                },
                {
                    "type": "text",
                    "text": "Finally, let me add a mobile-specific optimization to prevent iOS bounce scrolling and improve touch handling:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01VDhAcNQi8NmDbPHJqJWRf2",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -190,6 +190,24 @@\n \t\t};\n \t}, []);\n \n+\t// Add mobile-specific touch handling\n+\tuseEffect(() => {\n+\t\tif (isMobileDevice) {\n+\t\t\t// Prevent iOS bounce scrolling\n+\t\t\tconst preventBounce = (e: TouchEvent) => {\n+\t\t\t\tif (e.touches.length > 1) {\n+\t\t\t\t\te.preventDefault();\n+\t\t\t\t}\n+\t\t\t};\n+\n+\t\t\tdocument.addEventListener('touchmove', preventBounce, { passive: false });\n+\t\t\t\n+\t\t\treturn () => {\n+\t\t\t\tdocument.removeEventListener('touchmove', preventBounce);\n+\t\t\t};\n+\t\t}\n+\t}, [isMobileDevice]);\n+\n \tuseEffect(() => {\n \t\tif (!containerRef.current || !scrollContainerRef.current || viewportSize.width === 0) return;\n ",
                    "refToolCallId": "toolu_01VDhAcNQi8NmDbPHJqJWRf2"
                },
                {
                    "type": "text",
                    "text": "Now let me add one final optimization - a mobile-specific CSS class for better performance:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JPAQZ4AJZtPQsb7G6DB8Jj",
                    "title": "",
                    "statusText": "Text to replace not found",
                    "status": "WARNING",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check the exact content around that area:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_011nah4GPbz39SWHmJvBRDCn",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01KShx39PZE5kmpAP3xdwwei",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I can make the correct replacement:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01MZZrVepdEFcZfNzkB4ScAd",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -516,8 +516,15 @@\n \t\t\t\t\t\tref={(el) => {\n \t\t\t\t\t\t\tif (el) cardsRef.current[index] = el;\n \t\t\t\t\t\t}}\n-\t\t\t\t\t\tclassName=\"w-screen h-full flex-shrink-0 relative flex items-center justify-center\"\n-\t\t\t\t\t\tstyle={{ backgroundColor: card.bgColor }}\n+\t\t\t\t\t\tclassName={`w-screen h-full flex-shrink-0 relative flex items-center justify-center ${\n+\t\t\t\t\t\t\tisMobileDevice ? 'touch-pan-y' : ''\n+\t\t\t\t\t\t}`}\n+\t\t\t\t\t\tstyle={{ \n+\t\t\t\t\t\t\tbackgroundColor: card.bgColor,\n+\t\t\t\t\t\t\t// Mobile performance optimizations\n+\t\t\t\t\t\t\tWebkitTransform: 'translateZ(0)',\n+\t\t\t\t\t\t\ttransform: 'translateZ(0)',\n+\t\t\t\t\t\t}}\n \t\t\t\t\t>\n \n \t\t\t\t\t\t{/* Parallax Background Element */}",
                    "refToolCallId": "toolu_01MZZrVepdEFcZfNzkB4ScAd"
                },
                {
                    "type": "text",
                    "text": "Perfect! Now let me create a summary of all the optimizations I've made to fix the mobile glitches:\n\n## Summary of Mobile Optimizations Applied\n\nI've made several key optimizations to fix the mobile glitches in your `wwd-cards.tsx` component:\n\n### 1. **Enhanced Mobile Detection**\n- Added more accurate mobile device detection using both viewport width and user agent\n- Added `isMobileDevice` state for better mobile-specific handling\n- Added debounced resize handling with orientation change support\n\n### 2. **Reduced Animation Complexity for Mobile**\n- **Scroll Multipliers**: Reduced from 2.5 to 2.0 for mobile devices\n- **Scrub Values**: Lighter scrub values (0.8 vs 1.2) for smoother mobile scrolling\n- **Animation Durations**: Faster animations on mobile (0.6s vs 0.8s)\n- **Movement Distances**: Reduced Y and X movement values for mobile\n\n### 3. **Disabled Heavy Effects on Mobile**\n- **Parallax Effects**: Completely disabled on mobile devices for better performance\n- **Complex Easing**: Simplified easing functions (power2.out instead of back.out)\n- **Stagger Animations**: Reduced stagger timing (0.05s vs 0.08s)\n\n### 4. **Hardware Acceleration & Performance**\n- Added `force3D: true` to all GSAP animations\n- Added `willChange: 'transform'` for mobile elements\n- Added `WebkitTransform: 'translateZ(0)'` for hardware acceleration\n- Used `100dvh` instead of `100svh` for better mobile viewport handling\n\n### 5. **ScrollTrigger Optimizations**\n- **anticipatePin**: Reduced to 0 for mobile (vs 1 for desktop)\n- **fastScrollEnd**: Enabled for mobile devices\n- **preventOverlaps**: Enabled for mobile to prevent conflicts\n\n### 6. **Touch & Scroll Behavior**\n- **Scroll Behavior**: Changed to 'auto' (instant) instead of 'smooth' on mobile\n- **Touch Action**: Added `pan-y` for better touch handling\n- **iOS Bounce Prevention**: Added touch event handling to prevent multi-touch issues\n- **Webkit Overflow Scrolling**: Added touch-optimized scrolling\n\n### 7. **Timeout Optimizations**\n- Reduced scrolling timeout from 1000ms to 500ms on mobile\n- Added debounced resize handling (150ms delay)\n\n### Key Benefits:\n- **Smoother Scrolling**: Reduced animation complexity prevents janky scrolling\n- **Better Performance**: Hardware acceleration and disabled heavy effects\n- **Touch-Friendly**: Proper touch handling and iOS-specific optimizations\n- **Responsive**: Better viewport handling and device-specific configurations\n\nThe component should now perform much better on mobile devices with smoother animations, better touch handling, and reduced performance bottlenecks. The horizontal scrolling experience should feel more native and responsive on mobile while maintaining the rich desktop experience."
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "components/wwd-cards.tsx",
                            "patch": "@@ -1179,24 +1179,86 @@\n seState(0);%0A\n+%09const %5BisMobileDevice, setIsMobileDevice%5D = useState(false);%0A\n %09const snapT\n@@ -1422,16 +1422,68 @@\n down');%0A\n+%09const resizeTimeoutRef = useRef%3CNodeJS.Timeout%3E();%0A\n %09const t\n@@ -2614,16 +2614,42 @@\n est card\n+ with mobile optimizations\n %0A%09const \n@@ -2957,32 +2957,58 @@\n as in useEffect)\n+ with mobile optimizations\n %0A%09%09let scrollMul\n@@ -3057,35 +3057,63 @@\n llMultiplier = 2\n-.5;\n+; // Further reduced for mobile\n %0A%09%09%7D else if (is\n@@ -3136,33 +3136,35 @@\n ollMultiplier = \n-3\n+2.5\n ;%0A%09%09%7D else if (i\n@@ -3766,40 +3766,38 @@\n lTo \n-for better browser compatibility\n+with mobile-optimized behavior\n %0A%09%09w\n@@ -3845,32 +3845,99 @@\n %09%09behavior: \n-'smooth'\n+isMobile ? 'auto' : 'smooth' // Instant scroll on mobile to avoid conflicts\n %0A%09%09%7D);%0A%0A%09%09se\n@@ -4010,16 +4010,45 @@\n nimation\n+ (shorter timeout for mobile)\n %0A%09%09setTi\n@@ -4100,16 +4100,33 @@\n se;%0A%09%09%7D,\n+ isMobile ? 500 :\n  1000);%0A\n@@ -4460,16 +4460,62 @@\n ort size\n+ with debouncing for better mobile performance\n %0A%09useEff\n@@ -4570,36 +4570,237 @@\n %0A%09%09%09\n-setViewportSize(%7B%0A%09%09%09%09\n+// Clear existing timeout%0A%09%09%09if (resizeTimeoutRef.current) %7B%0A%09%09%09%09clearTimeout(resizeTimeoutRef.current);%0A%09%09%09%7D%0A%0A%09%09%09// Debounce resize events for better performance%0A%09%09%09resizeTimeoutRef.current = setTimeout(() =%3E %7B%0A%09%09%09%09const \n width\n-:\n+ =\n  win\n@@ -4813,29 +4813,36 @@\n nerWidth\n-,\n+;\n %0A%09%09%09%09\n+const \n height\n-:\n+ =\n  window.\n@@ -4852,22 +4852,283 @@\n erHeight\n-,%0A%09%09%09%7D\n+;%0A%09%09%09%09%0A%09%09%09%09setViewportSize(%7B width, height %7D);%0A%09%09%09%09%0A%09%09%09%09// Detect mobile device more accurately%0A%09%09%09%09const isMobile = width %3C= 768 %7C%7C /Android%7CwebOS%7CiPhone%7CiPad%7CiPod%7CBlackBerry%7CIEMobile%7COpera Mini/i.test(navigator.userAgent);%0A%09%09%09%09setIsMobileDevice(isMobile);%0A%09%09%09%7D, 150\n );%0A%09%09%7D;%0A\n@@ -5208,16 +5208,84 @@\n rtSize);\n+%0A%09%09window.addEventListener('orientationchange', updateViewportSize);\n %0A%0A%09%09retu\n@@ -5293,16 +5293,21 @@\n n () =%3E \n+%7B%0A%09%09%09\n window.r\n@@ -5357,20 +5357,610 @@\n Size);%0A%09\n-%7D, %5B\n+%09%09window.removeEventListener('orientationchange', updateViewportSize);%0A%09%09%09if (resizeTimeoutRef.current) %7B%0A%09%09%09%09clearTimeout(resizeTimeoutRef.current);%0A%09%09%09%7D%0A%09%09%7D;%0A%09%7D, %5B%5D);%0A%0A%09// Add mobile-specific touch handling%0A%09useEffect(() =%3E %7B%0A%09%09if (isMobileDevice) %7B%0A%09%09%09// Prevent iOS bounce scrolling%0A%09%09%09const preventBounce = (e: TouchEvent) =%3E %7B%0A%09%09%09%09if (e.touches.length %3E 1) %7B%0A%09%09%09%09%09e.preventDefault();%0A%09%09%09%09%7D%0A%09%09%09%7D;%0A%0A%09%09%09document.addEventListener('touchmove', preventBounce, %7B passive: false %7D);%0A%09%09%09%0A%09%09%09return () =%3E %7B%0A%09%09%09%09document.removeEventListener('touchmove', preventBounce);%0A%09%09%09%7D;%0A%09%09%7D%0A%09%7D, %5BisMobileDevice\n %5D);%0A%0A%09us\n@@ -6433,16 +6433,42 @@\n ice type\n+ with mobile optimizations\n %0A%09%09%09let \n@@ -6526,16 +6526,43 @@\n  number;\n+%0A%09%09%09let scrubValue: number;\n %0A%0A%09%09%09if \n@@ -6602,16 +6602,22 @@\n  = 2\n-.5\n ; // \n-R\n+Further r\n educ\n@@ -6672,19 +6672,69 @@\n dth * 1.\n-5\n+2\n ;%0A\n+%09%09%09%09scrubValue = 0.8; // Lighter scrub for mobile%0A\n %09%09%09%7D els\n@@ -6766,33 +6766,35 @@\n ollMultiplier = \n-3\n+2.5\n ;%0A%09%09%09%09minScrollD\n@@ -6815,25 +6815,47 @@\n portWidth * \n-2\n+1.8;%0A%09%09%09%09scrubValue = 1\n ;%0A%09%09%09%7D else \n@@ -6902,37 +6902,8 @@\n = 4;\n- // More scroll for ultrawide\n %0A%09%09%09\n@@ -6942,16 +6942,38 @@\n th * 3;%0A\n+%09%09%09%09scrubValue = 1.2;%0A\n %09%09%09%7D els\n@@ -7069,16 +7069,38 @@\n  * 2.5;%0A\n+%09%09%09%09scrubValue = 1.2;%0A\n %09%09%09%7D els\n@@ -7172,16 +7172,38 @@\n th * 2;%0A\n+%09%09%09%09scrubValue = 1.2;%0A\n %09%09%09%7D%0A%0A%09%09\n@@ -7483,31 +7483,42 @@\n  height \n-based on device\n+with better mobile support\n %0A%09%09%09cons\n@@ -7552,17 +7552,17 @@\n e ? '100\n-s\n+d\n vh' : '1\n@@ -7609,16 +7609,42 @@\n ontainer\n+ with mobile optimizations\n %0A%09%09%09gsap\n@@ -7719,16 +7719,88 @@\n Height,%0A\n+%09%09%09%09willChange: isMobile ? 'transform' : 'auto', // Optimize for mobile%0A\n %09%09%09%7D);%0A%0A\n@@ -8057,16 +8057,42 @@\n timeline\n+ with mobile optimizations\n %0A%09%09%09cons\n@@ -8244,19 +8244,26 @@\n %09scrub: \n-1.2\n+scrubValue\n ,%0A%09%09%09%09%09p\n@@ -8292,18 +8292,68 @@\n atePin: \n-1,\n+isMobile ? 0 : 1, // Reduce anticipatePin for mobile\n %0A%09%09%09%09%09in\n@@ -8412,96 +8412,210 @@\n %09%09%09%09\n-onUpdate: (self) =%3E %7B%0A%09%09%09%09%09%09// Only update current card index, no snapping during scroll\n+fastScrollEnd: isMobile ? true : false, // Better mobile scroll handling%0A%09%09%09%09%09preventOverlaps: isMobile ? true : false,%0A%09%09%09%09%09onUpdate: (self) =%3E %7B%0A%09%09%09%09%09%09// Throttle updates for better mobile performance\n %0A%09%09%09\n@@ -8922,16 +8922,33 @@\n nt with \n+mobile-optimized \n easing%0A%09\n@@ -9030,16 +9030,60 @@\n %22none%22,%0A\n+%09%09%09%09force3D: true, // Hardware acceleration%0A\n %09%09%09%7D);%0A%0A\n@@ -9192,16 +9192,42 @@\n imations\n+ with mobile optimizations\n %0A%09%09cards\n@@ -9433,16 +9433,75 @@\n %5Bindex%5D;\n+%0A%09%09%09const %7B isMobile %7D = getDeviceInfo(viewportSize.width);\n %0A%0A%09%09%09// \n@@ -9525,24 +9525,52 @@\n ide elements\n+ with mobile-friendly values\n %0A%09%09%09gsap.set\n@@ -9613,18 +9613,84 @@\n %0A%09%09%09%09y: \n-50\n+isMobile ? 30 : 50, // Reduced movement for mobile%0A%09%09%09%09force3D: true\n ,%0A%09%09%09%7D);\n@@ -9839,23 +9839,107 @@\n %09y: \n-30,%0A%09%09%09%09%09x: -20\n+isMobile ? 20 : 30,%0A%09%09%09%09%09x: isMobile ? -10 : -20, // Reduced movement for mobile%0A%09%09%09%09%09force3D: true\n ,%0A%09%09\n@@ -10021,12 +10021,64 @@\n le: \n-0.9,\n+isMobile ? 0.95 : 0.9, // Less dramatic scale for mobile\n %0A%09%09%09\n@@ -10088,24 +10088,44 @@\n otation: 0,%0A\n+%09%09%09%09%09force3D: true,%0A\n %09%09%09%09%7D);%0A%09%09%09%7D\n@@ -10179,22 +10179,30 @@\n ith \n-snap detection\n+mobile-optimized scrub\n %0A%09%09%09\n@@ -10335,12 +10335,55 @@\n ub: \n-1.5,\n+isMobile ? 1 : 1.5, // Lighter scrub for mobile\n %0A%09%09%09\n@@ -10945,24 +10945,50 @@\n ntent reveal\n+ with mobile optimizations\n %0A%09%09%09if (cont\n@@ -11147,12 +11147,50 @@\n on: \n-0.8,\n+isMobile ? 0.6 : 0.8, // Faster for mobile\n %0A%09%09%09\n@@ -11204,32 +11204,53 @@\n : %22power2.out%22,%0A\n+%09%09%09%09%09%09force3D: true,%0A\n %09%09%09%09%09%7D, 0)%0A%09%09%09%09%09\n@@ -11326,16 +11326,33 @@\n uration:\n+ isMobile ? 0.4 :\n  0.6,%0A%09%09\n@@ -11368,13 +11368,61 @@\n er: \n-0.08,\n+isMobile ? 0.05 : 0.08, // Reduced stagger for mobile\n %0A%09%09%09\n@@ -11440,24 +11440,45 @@\n ower2.out%22,%0A\n+%09%09%09%09%09%09force3D: true,%0A\n %09%09%09%09%09%7D, 0.2)\n@@ -11475,17 +11475,17 @@\n %09%09%09%7D, 0.\n-2\n+1\n );%0A%09%09%09%7D%0A\n@@ -11511,16 +11511,42 @@\n e reveal\n+ with mobile optimizations\n %0A%09%09%09if (\n@@ -11646,39 +11646,152 @@\n on: \n-1.2,%0A%09%09%09%09%09ease: %22back.out(1.2)%22\n+isMobile ? 0.8 : 1.2, // Faster for mobile%0A%09%09%09%09%09ease: isMobile ? %22power2.out%22 : %22back.out(1.2)%22, // Simpler easing for mobile%0A%09%09%09%09%09force3D: true\n ,%0A%09%09\n@@ -11797,17 +11797,17 @@\n %09%09%09%7D, 0.\n-4\n+3\n );%0A%09%09%09%7D%0A\n@@ -11803,24 +11803,109 @@\n 0.3);%0A%09%09%09%7D%0A%0A\n+%09%09%09// Disable parallax effects on mobile for better performance%0A%09%09%09if (!isMobile) %7B%0A%09\n %09%09%09// Subtle\n@@ -11944,20 +11944,36 @@\n elements\n+ (desktop only)\n %0A%09%09%09\n+%09\n if (para\n@@ -11983,24 +11983,25 @@\n xElement) %7B%0A\n+%09\n %09%09%09%09gsap.to(\n@@ -12015,24 +12015,25 @@\n xElement, %7B%0A\n+%09\n %09%09%09%09%09x: -30,\n@@ -12034,24 +12034,25 @@\n : -30,%0A%09%09%09%09%09\n+%09\n scrollTrigge\n@@ -12054,32 +12054,33 @@\n rigger: %7B%0A%09%09%09%09%09%09\n+%09\n trigger: card,%0A%09\n@@ -12070,32 +12070,33 @@\n %09trigger: card,%0A\n+%09\n %09%09%09%09%09%09start: %22le\n@@ -12104,32 +12104,33 @@\n t right%22,%0A%09%09%09%09%09%09\n+%09\n end: %22right left\n@@ -12134,24 +12134,25 @@\n eft%22,%0A%09%09%09%09%09%09\n+%09\n scrub: 2.5,%0A\n@@ -12147,24 +12147,25 @@\n scrub: 2.5,%0A\n+%09\n %09%09%09%09%09%09horizo\n@@ -12174,32 +12174,33 @@\n al: true,%0A%09%09%09%09%09%09\n+%09\n containerAnimati\n@@ -12214,34 +12214,36 @@\n izontalTl,%0A%09%09%09%09%09\n+%09\n %7D%0A\n+%09\n %09%09%09%09%7D);%0A%09%09%09%7D%0A%0A%09%09\n@@ -12233,27 +12233,29 @@\n %09%09%09%09%09%7D);%0A%09%09%09\n+%09\n %7D%0A%0A\n+%09\n %09%09%09// Image \n@@ -12269,17 +12269,33 @@\n x effect\n-%0A\n+ (desktop only)%0A%09\n %09%09%09if (i\n@@ -12302,24 +12302,25 @@\n mage) %7B%0A%09%09%09%09\n+%09\n gsap.to(imag\n@@ -12333,15 +12333,17 @@\n %09%09%09%09\n+%09\n x: 15,%0A\n+%09\n %09%09%09%09\n@@ -12362,24 +12362,25 @@\n er: %7B%0A%09%09%09%09%09%09\n+%09\n trigger: car\n@@ -12378,24 +12378,25 @@\n gger: card,%0A\n+%09\n %09%09%09%09%09%09start:\n@@ -12406,24 +12406,25 @@\n eft right%22,%0A\n+%09\n %09%09%09%09%09%09end: %22\n@@ -12438,24 +12438,25 @@\n eft%22,%0A%09%09%09%09%09%09\n+%09\n scrub: 3.5,%0A\n@@ -12451,24 +12451,25 @@\n scrub: 3.5,%0A\n+%09\n %09%09%09%09%09%09horizo\n@@ -12476,24 +12476,25 @@\n ntal: true,%0A\n+%09\n %09%09%09%09%09%09contai\n@@ -12530,18 +12530,20 @@\n %09%09%09%09\n+%09\n %7D%0A\n+%09\n %09%09%09%09%7D);%0A\n %09%09%09%7D\n@@ -12534,24 +12534,30 @@\n %09%7D%0A%09%09%09%09%09%7D);%0A\n+%09%09%09%09%7D%0A\n %09%09%09%7D%0A%09%09%7D);%0A%0A\n@@ -12912,16 +12912,42 @@\n function\n+ with mobile optimizations\n %0A%09const \n@@ -13221,16 +13221,42 @@\n eEffect)\n+ with mobile optimizations\n %0A%09%09let s\n@@ -13313,35 +13313,63 @@\n llMultiplier = 2\n-.5;\n+; // Further reduced for mobile\n %0A%09%09%7D else if (is\n@@ -13396,25 +13396,27 @@\n ultiplier = \n-3\n+2.5\n ;%0A%09%09%7D else i\n@@ -13937,40 +13937,38 @@\n lTo \n-for better browser compatibility\n+with mobile-optimized behavior\n %0A%09%09w\n@@ -14020,24 +14020,91 @@\n havior: \n-'smooth'\n+isMobile ? 'auto' : 'smooth' // Instant scroll on mobile to avoid conflicts\n %0A%09%09%7D);%0A%09\n@@ -14209,114 +14209,549 @@\n Ref%7D\n-%3E%0A%0A%09%09%09%7B/* Horizontal Scroll Container */%7D%0A%09%09%09%3Cdiv%0A%09%09%09%09ref=%7BscrollContainerRef%7D%0A%09%09%09%09className=%22flex h-full%22\n+%0A%09%09%09style=%7B%7B%0A%09%09%09%09// Mobile-specific optimizations%0A%09%09%09%09WebkitOverflowScrolling: 'touch',%0A%09%09%09%09touchAction: isMobileDevice ? 'pan-y' : 'auto',%0A%09%09%09%09WebkitTransform: 'translateZ(0)', // Force hardware acceleration%0A%09%09%09%09transform: 'translateZ(0)',%0A%09%09%09%7D%7D%3E%0A%0A%09%09%09%7B/* Horizontal Scroll Container */%7D%0A%09%09%09%3Cdiv%0A%09%09%09%09ref=%7BscrollContainerRef%7D%0A%09%09%09%09className=%22flex h-full%22%0A%09%09%09%09style=%7B%7B%0A%09%09%09%09%09// Mobile performance optimizations%0A%09%09%09%09%09willChange: isMobileDevice ? 'transform' : 'auto',%0A%09%09%09%09%09WebkitTransform: 'translateZ(0)',%0A%09%09%09%09%09transform: 'translateZ(0)',%0A%09%09%09%09%7D%7D\n %3E%0A%0A%09\n@@ -14907,17 +14907,18 @@\n assName=\n-%22\n+%7B%60\n w-screen\n@@ -14980,17 +14980,72 @@\n y-center\n-%22\n+ $%7B%0A%09%09%09%09%09%09%09isMobileDevice ? 'touch-pan-y' : ''%0A%09%09%09%09%09%09%7D%60%7D\n %0A%09%09%09%09%09%09s\n@@ -15044,32 +15044,40 @@\n %0A%09%09%09%09%09%09style=%7B%7B \n+%0A%09%09%09%09%09%09%09\n backgroundColor:\n@@ -15085,25 +15085,151 @@\n card.bgColor\n- \n+,%0A%09%09%09%09%09%09%09// Mobile performance optimizations%0A%09%09%09%09%09%09%09WebkitTransform: 'translateZ(0)',%0A%09%09%09%09%09%09%09transform: 'translateZ(0)',%0A%09%09%09%09%09%09\n %7D%7D%0A%09%09%09%09%09%3E%0A%0A%09\n",
                            "isNew": false,
                            "isApplied": false
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "756f3699-99b4-48a3-af08-4d898550d694"
            },
            "createdAt": 1750491272391,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}