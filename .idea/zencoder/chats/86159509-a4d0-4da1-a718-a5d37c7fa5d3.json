{
    "checksum": "101bc64ac4b4be1d58a46be424f556577871f41aae4aaf8958139ebe5455f620",
    "data": {
    "id": "86159509-a4d0-4da1-a718-a5d37c7fa5d3",
    "createdAt": 1750311765838,
    "updatedAt": 1750312354301,
    "title": "Fixing Responsiveness Bugs",
    "messages": [
        {
            "id": "f2048294-776b-4e3d-8aa7-6b9c867cb419",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "fix bugs in this file. There seems to be issues with responsiveness with different devices both small and big"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "components/wwd-cards.tsx",
                    "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "\"use client\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { useRef, useEffect, useState } from \"react\";\nimport { useTranslations } from \"next-intl\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport {\n\twhatwedoImg1,\n\twhatwedoImg2,\n\twhatwedoImg3,\n\twhatwedoImg4,\n} from \"@/public\";\n\n// Register ScrollTrigger plugin\nif (typeof window !== \"undefined\") {\n\tgsap.registerPlugin(ScrollTrigger);\n}\n\ninterface CardData {\n\tid: number;\n\ttitle: string;\n\theading1: string;\n\theading2: string;\n\tpara: string;\n\thref: string;\n\tbgColor: string;\n\ttextColor: string;\n\tlinkColor: string;\n\timage: any;\n}\n\nexport default function Card() {\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\tconst scrollContainerRef = useRef<HTMLDivElement>(null);\n\tconst cardsRef = useRef<HTMLDivElement[]>([]);\n\tconst contentRefs = useRef<HTMLDivElement[]>([]);\n\tconst imageRefs = useRef<HTMLDivElement[]>([]);\n\tconst parallaxRefs = useRef<HTMLDivElement[]>([]);\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\tconst t = useTranslations(\"whatwedoContent\");\n\n\tconst cardData: CardData[] = [\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: t(\"title1\"),\n\t\t\theading1: t(\"heading1\"),\n\t\t\theading2: t(\"heading2\"),\n\t\t\tpara: t(\"para1\"),\n\t\t\thref: t(\"href1\"),\n\t\t\tbgColor: t(\"bgColor1\"),\n\t\t\ttextColor: t(\"textColor1\"),\n\t\t\tlinkColor: t(\"linkColor1\"),\n\t\t\timage: whatwedoImg1,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: t(\"title2\"),\n\t\t\theading1: t(\"heading3\"),\n\t\t\theading2: t(\"heading4\"),\n\t\t\tpara: t(\"para2\"),\n\t\t\thref: t(\"href2\"),\n\t\t\tbgColor: t(\"bgColor2\"),\n\t\t\ttextColor: t(\"textColor2\"),\n\t\t\tlinkColor: t(\"linkColor2\"),\n\t\t\timage: whatwedoImg2,\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\ttitle: t(\"title3\"),\n\t\t\theading1: t(\"heading5\"),\n\t\t\theading2: t(\"heading6\"),\n\t\t\tpara: t(\"para3\"),\n\t\t\thref: t(\"href3\"),\n\t\t\tbgColor: t(\"bgColor3\"),\n\t\t\ttextColor: t(\"textColor3\"),\n\t\t\tlinkColor: t(\"linkColor3\"),\n\t\t\timage: whatwedoImg3,\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\ttitle: t(\"title4\"),\n\t\t\theading1: t(\"heading7\"),\n\t\t\theading2: t(\"heading8\"),\n\t\t\tpara: t(\"para4\"),\n\t\t\thref: t(\"href4\"),\n\t\t\tbgColor: t(\"bgColor4\"),\n\t\t\ttextColor: t(\"textColor4\"),\n\t\t\tlinkColor: t(\"linkColor4\"),\n\t\t\timage: whatwedoImg4,\n\t\t},\n\t];\n\n\tuseEffect(() => {\n\t\tif (!containerRef.current || !scrollContainerRef.current) return;\n\n\t\tconst container = containerRef.current;\n\t\tconst scrollContainer = scrollContainerRef.current;\n\n\t\tconst setupAnimation = () => {\n\t\t\tconst viewportWidth = window.innerWidth;\n\t\t\tconst isMobile = viewportWidth <= 768;\n\t\t\tconst isTablet = viewportWidth <= 1024 && viewportWidth > 768;\n\n\t\t\tconst totalWidth = cardData.length * viewportWidth;\n\t\t\tconst scrollDistance = totalWidth - viewportWidth;\n\n\t\t\t// Adjust scroll distance based on device type\n\t\t\tlet adjustedScrollDistance = scrollDistance;\n\t\t\tif (isMobile) {\n\t\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2);\n\t\t\t} else if (isTablet) {\n\t\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2.5);\n\t\t\t}\n\n\t\t\t// Calculate adjusted width for the scroll container\n\t\t\tconst adjustedWidth = viewportWidth + adjustedScrollDistance;\n\n\t\t\t// Set up horizontal scroll container\n\t\t\tgsap.set(scrollContainer, {\n\t\t\t\twidth: adjustedWidth, // Use adjusted width\n\t\t\t\theight: \"100vh\",\n\t\t\t});\n\n\t\t\t// Create horizontal scroll timeline with device-specific scroll distance\n\t\t\tconst horizontalTl = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: container,\n\t\t\t\t\tstart: \"top top\",\n\t\t\t\t\tend: () => `+=${adjustedScrollDistance}`,\n\t\t\t\t\tscrub: 1,\n\t\t\t\t\tpin: true,\n\t\t\t\t\tanticipatePin: 1,\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\trefreshPriority: -1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// Animate horizontal movement\n\t\t\thorizontalTl.to(scrollContainer, {\n\t\t\t\tx: -adjustedScrollDistance, // Use adjusted scroll distance\n\t\t\t\tease: \"none\",\n\t\t\t});\n\n\t\t\treturn horizontalTl;\n\t\t};\n\n\t\tconst horizontalTl = setupAnimation();\n\n\t\t// Set up individual card animations\n\t\tcardsRef.current.forEach((card, index) => {\n\t\t\tif (!card) return;\n\n\t\t\tconst content = contentRefs.current[index];\n\t\t\tconst image = imageRefs.current[index];\n\t\t\tconst parallaxElement = parallaxRefs.current[index];\n\n\t\t\t// Initial setup - hide elements\n\t\t\tgsap.set([content, image], {\n\t\t\t\topacity: 0,\n\t\t\t\ty: 100,\n\t\t\t});\n\n\t\t\tif (content) {\n\t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n\t\t\t\tgsap.set(textElements, {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\ty: 50,\n\t\t\t\t\tx: -30,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (image) {\n\t\t\t\tgsap.set(image, {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\tscale: 0.8,\n\t\t\t\t\trotation: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Create reveal animation for each card\n\t\t\tconst cardTl = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: card,\n\t\t\t\t\tstart: \"left 80%\",\n\t\t\t\t\tend: \"left 20%\",\n\t\t\t\t\tscrub: 1,\n\t\t\t\t\thorizontal: true,\n\t\t\t\t\tcontainerAnimation: horizontalTl,\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Animate content reveal\n\t\t\tif (content) {\n\t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n\t\t\t\tcardTl\n\t\t\t\t\t.to(content, {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tduration: 0.6,\n\t\t\t\t\t\tease: \"power2.out\",\n\t\t\t\t\t}, 0)\n\t\t\t\t\t.to(textElements, {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\tstagger: 0.1,\n\t\t\t\t\t\tease: \"power2.out\",\n\t\t\t\t\t}, 0.2);\n\t\t\t}\n\n\t\t\t// Animate image reveal with parallax\n\t\t\tif (image) {\n\t\t\t\tcardTl.to(image, {\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tscale: 1,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tduration: 1,\n\t\t\t\t\tease: \"back.out(1.7)\",\n\t\t\t\t}, 0.4);\n\t\t\t}\n\n\t\t\t// Parallax effect for background elements\n\t\t\tif (parallaxElement) {\n\t\t\t\tgsap.to(parallaxElement, {\n\t\t\t\t\tx: -100,\n\t\t\t\t\tscrollTrigger: {\n\t\t\t\t\t\ttrigger: card,\n\t\t\t\t\t\tstart: \"left right\",\n\t\t\t\t\t\tend: \"right left\",\n\t\t\t\t\t\tscrub: 2,\n\t\t\t\t\t\thorizontal: true,\n\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Additional parallax for images\n\t\t\tif (image) {\n\t\t\t\tgsap.to(image, {\n\t\t\t\t\tx: 50,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tscrollTrigger: {\n\t\t\t\t\t\ttrigger: card,\n\t\t\t\t\t\tstart: \"left right\",\n\t\t\t\t\t\tend: \"right left\",\n\t\t\t\t\t\tscrub: 3,\n\t\t\t\t\t\thorizontal: true,\n\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Set loaded state\n\t\tsetTimeout(() => setIsLoaded(true), 100);\n\n\t\t// Handle resize to recalculate on orientation change\n\t\tlet resizeTimeout: NodeJS.Timeout;\n\t\tconst handleResize = () => {\n\t\t\tclearTimeout(resizeTimeout);\n\t\t\tresizeTimeout = setTimeout(() => {\n\t\t\t\tScrollTrigger.refresh();\n\t\t\t}, 250);\n\t\t};\n\n\t\twindow.addEventListener('resize', handleResize);\n\n\t\treturn () => {\n\t\t\tif (resizeTimeout) clearTimeout(resizeTimeout);\n\t\t\twindow.removeEventListener('resize', handleResize);\n\t\t\tScrollTrigger.getAll().forEach(trigger => trigger.kill());\n\t\t};\n\t}, [cardData.length]);\n\n\t// Scroll to specific card\n\tconst scrollToCard = (index: number) => {\n\t\tif (!containerRef.current) return;\n\n\t\tconst viewportWidth = window.innerWidth;\n\t\tconst isMobile = viewportWidth <= 768;\n\t\tconst isTablet = viewportWidth <= 1024 && viewportWidth > 768;\n\n\t\tconst totalWidth = cardData.length * viewportWidth;\n\t\tconst scrollDistance = totalWidth - viewportWidth;\n\n\t\t// Calculate adjusted scroll distance (same logic as in useEffect)\n\t\tlet adjustedScrollDistance = scrollDistance;\n\t\tif (isMobile) {\n\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2);\n\t\t} else if (isTablet) {\n\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2.5);\n\t\t}\n\n\t\t// Calculate proportional scroll position\n\t\tconst progress = index / (cardData.length - 1);\n\t\tconst targetScrollY = containerRef.current.offsetTop + (adjustedScrollDistance * progress);\n\n\t\tgsap.to(window, {\n\t\t\tscrollTo: {\n\t\t\t\ty: targetScrollY,\n\t\t\t\tautoKill: false\n\t\t\t},\n\t\t\tduration: 1,\n\t\t\tease: \"power2.inOut\"\n\t\t});\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"w-full h-screen relative overflow-hidden\"\n\t\t\tref={containerRef}>\n\n\t\t\t{/* Horizontal Scroll Container */}\n\t\t\t<div\n\t\t\t\tref={scrollContainerRef}\n\t\t\t\tclassName=\"flex h-full\">\n\n\t\t\t\t{cardData.map((card, index) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\tif (el) cardsRef.current[index] = el;\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"w-screen h-full flex-shrink-0 relative flex items-center justify-center\"\n\t\t\t\t\t\tstyle={{ backgroundColor: card.bgColor }}>\n\n\t\t\t\t\t\t{/* Parallax Background Element */}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\tif (el) parallaxRefs.current[index] = el;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 opacity-10\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackground: `radial-gradient(circle at 30% 70%, ${card.linkColor}40 0%, transparent 50%)`\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* Card Content */}\n\t\t\t\t\t\t<div className=\"w-full max-w-7xl h-full flex items-center justify-between gap-8 px-6 xm:flex-col xm:justify-center xm:gap-6 sm:flex-col sm:justify-center sm:gap-8 relative z-10\">\n\n\t\t\t\t\t\t\t{/* Content Section */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\t\tif (el) contentRefs.current[index] = el;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName=\"w-1/2 xm:w-full sm:w-full flex flex-col justify-center gap-8 xm:gap-4 sm:gap-6 px-8 xm:px-4 sm:px-6 xm:text-center sm:text-center\">\n\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-4 xm:gap-3 sm:gap-4\">\n\t\t\t\t\t\t\t\t\t<h4\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-2xl xm:text-lg sm:text-xl leading-tight tracking-tighter opacity-80\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n\t\t\t\t\t\t\t\t\t\t{card.title}\n\t\t\t\t\t\t\t\t\t</h4>\n\n\t\t\t\t\t\t\t\t\t<h2\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-7xl xm:text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold leading-tight tracking-tighter\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n\t\t\t\t\t\t\t\t\t\t{card.heading1}\n\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t{card.heading2}\n\t\t\t\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-xl xm:text-base sm:text-lg leading-relaxed tracking-tight max-w-lg xm:max-w-none sm:max-w-none\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n\t\t\t\t\t\t\t\t\t\t{card.para}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"w-fit xm:w-full sm:w-full flex flex-col gap-2 xm:items-center sm:items-center\">\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: card.linkColor }}\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-lg xm:text-base sm:text-lg font-medium leading-tight tracking-tight hover:opacity-80 transition-opacity duration-300 relative group\"\n\t\t\t\t\t\t\t\t\t\thref={card.href}>\n\t\t\t\t\t\t\t\t\t\t{card.href}\n\t\t\t\t\t\t\t\t\t\t<span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-current transition-all duration-300 group-hover:w-full\" style={{ backgroundColor: card.linkColor }}></span>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* Image Section */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\t\tif (el) imageRefs.current[index] = el;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName=\"w-1/2 xm:w-full sm:w-full flex items-center justify-center p-8 xm:p-4 sm:p-6\">\n\n\t\t\t\t\t\t\t\t<div className=\"relative w-full max-w-md xm:max-w-sm sm:max-w-md\">\n\t\t\t\t\t\t\t\t\t{/* Image Glow Effect */}\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName=\"absolute inset-0 rounded-2xl blur-2xl opacity-20\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: card.linkColor }}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\t\tsrc={card.image}\n\t\t\t\t\t\t\t\t\t\talt={card.title}\n\t\t\t\t\t\t\t\t\t\tclassName=\"relative w-full h-auto object-contain rounded-2xl shadow-2xl transition-transform duration-300 hover:scale-105\"\n\t\t\t\t\t\t\t\t\t\tpriority={index === 0}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t{/* Scroll Hint */}\n\t\t\t<div className={`fixed bottom-20 left-1/2 transform -translate-x-1/2 transition-opacity duration-1000 z-40 xm:bottom-16 sm:bottom-18 ${isLoaded ? 'opacity-100' : 'opacity-0'}`}>\n\t\t\t\t<div className=\"flex items-center gap-2 text-white/70 animate-bounce\">\n\t\t\t\t\t<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n\t\t\t\t\t</svg>\n\t\t\t\t\t<span className=\"text-sm font-medium\">Scroll to explore</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
                    "language": "typescript jsx"
                },
                "codebaseEnabled": false
            },
            "createdAt": 1750312148952,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "fix bugs in this file. There seems to be issues with responsiveness with different devices both small and big"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "81ec80a3-24f8-4cbf-8cad-11d5ccaaeeea",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'll help you fix the responsiveness issues in the `components/wwd-cards.tsx` file. Let me first re-read the current state of the file to understand the issues."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01BceHZmQwpYhJVb4oXoNbHp",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I can see the issues with responsiveness in this horizontal scrolling card component. Let me analyze the problems and fix them:\n\n**Issues identified:**\n1. The scroll distance calculation is problematic for different screen sizes\n2. The horizontal scroll animation doesn't properly account for mobile/tablet layouts where cards stack vertically\n3. The breakpoint logic is inconsistent and may cause issues on larger screens\n4. The scroll container width calculation doesn't properly handle responsive layouts\n5. Missing proper cleanup and re-initialization on resize\n6. The card layout switches to vertical on mobile but the horizontal scroll logic remains the same\n\nLet me fix these issues:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01HvEwwQEPjQwjd5WKFuSqWF",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -99,53 +99,73 @@\n \n \t\tconst setupAnimation = () => {\n \t\t\tconst viewportWidth = window.innerWidth;\n+\t\t\tconst viewportHeight = window.innerHeight;\n \t\t\tconst isMobile = viewportWidth <= 768;\n \t\t\tconst isTablet = viewportWidth <= 1024 && viewportWidth > 768;\n-\n-\t\t\tconst totalWidth = cardData.length * viewportWidth;\n-\t\t\tconst scrollDistance = totalWidth - viewportWidth;\n-\n-\t\t\t// Adjust scroll distance based on device type\n-\t\t\tlet adjustedScrollDistance = scrollDistance;\n-\t\t\tif (isMobile) {\n-\t\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2);\n-\t\t\t} else if (isTablet) {\n-\t\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2.5);\n-\t\t\t}\n-\n-\t\t\t// Calculate adjusted width for the scroll container\n-\t\t\tconst adjustedWidth = viewportWidth + adjustedScrollDistance;\n-\n-\t\t\t// Set up horizontal scroll container\n-\t\t\tgsap.set(scrollContainer, {\n-\t\t\t\twidth: adjustedWidth, // Use adjusted width\n-\t\t\t\theight: \"100vh\",\n-\t\t\t});\n-\n-\t\t\t// Create horizontal scroll timeline with device-specific scroll distance\n-\t\t\tconst horizontalTl = gsap.timeline({\n-\t\t\t\tscrollTrigger: {\n-\t\t\t\t\ttrigger: container,\n-\t\t\t\t\tstart: \"top top\",\n-\t\t\t\t\tend: () => `+=${adjustedScrollDistance}`,\n-\t\t\t\t\tscrub: 1,\n-\t\t\t\t\tpin: true,\n-\t\t\t\t\tanticipatePin: 1,\n-\t\t\t\t\tinvalidateOnRefresh: true,\n-\t\t\t\t\trefreshPriority: -1,\n-\t\t\t\t},\n-\t\t\t});\n-\n-\t\t\t// Animate horizontal movement\n-\t\t\thorizontalTl.to(scrollContainer, {\n-\t\t\t\tx: -adjustedScrollDistance, // Use adjusted scroll distance\n-\t\t\t\tease: \"none\",\n-\t\t\t});\n-\n-\t\t\treturn horizontalTl;\n+\t\t\tconst isDesktop = viewportWidth > 1024;\n+\n+\t\t\t// For mobile and tablet, use vertical scrolling approach\n+\t\t\tif (isMobile || isTablet) {\n+\t\t\t\t// Reset any horizontal transforms\n+\t\t\t\tgsap.set(scrollContainer, {\n+\t\t\t\t\tx: 0,\n+\t\t\t\t\twidth: \"100%\",\n+\t\t\t\t\theight: \"auto\",\n+\t\t\t\t\tminHeight: `${cardData.length * 100}vh`,\n+\t\t\t\t});\n+\n+\t\t\t\t// Create vertical scroll timeline\n+\t\t\t\tconst verticalTl = gsap.timeline({\n+\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\ttrigger: container,\n+\t\t\t\t\t\tstart: \"top top\",\n+\t\t\t\t\t\tend: () => `+=${(cardData.length - 1) * viewportHeight}`,\n+\t\t\t\t\t\tscrub: 1,\n+\t\t\t\t\t\tpin: true,\n+\t\t\t\t\t\tanticipatePin: 1,\n+\t\t\t\t\t\tinvalidateOnRefresh: true,\n+\t\t\t\t\t\trefreshPriority: -1,\n+\t\t\t\t\t},\n+\t\t\t\t});\n+\n+\t\t\t\treturn verticalTl;\n+\t\t\t} else {\n+\t\t\t\t// Desktop horizontal scrolling\n+\t\t\t\tconst totalWidth = cardData.length * viewportWidth;\n+\t\t\t\tconst scrollDistance = totalWidth - viewportWidth;\n+\n+\t\t\t\t// Set up horizontal scroll container\n+\t\t\t\tgsap.set(scrollContainer, {\n+\t\t\t\t\twidth: totalWidth,\n+\t\t\t\t\theight: \"100vh\",\n+\t\t\t\t\tx: 0, // Reset any previous transforms\n+\t\t\t\t});\n+\n+\t\t\t\t// Create horizontal scroll timeline\n+\t\t\t\tconst horizontalTl = gsap.timeline({\n+\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\ttrigger: container,\n+\t\t\t\t\t\tstart: \"top top\",\n+\t\t\t\t\t\tend: () => `+=${scrollDistance}`,\n+\t\t\t\t\t\tscrub: 1,\n+\t\t\t\t\t\tpin: true,\n+\t\t\t\t\t\tanticipatePin: 1,\n+\t\t\t\t\t\tinvalidateOnRefresh: true,\n+\t\t\t\t\t\trefreshPriority: -1,\n+\t\t\t\t\t},\n+\t\t\t\t});\n+\n+\t\t\t\t// Animate horizontal movement\n+\t\t\t\thorizontalTl.to(scrollContainer, {\n+\t\t\t\t\tx: -scrollDistance,\n+\t\t\t\t\tease: \"none\",\n+\t\t\t\t});\n+\n+\t\t\t\treturn horizontalTl;\n+\t\t\t}\n \t\t};\n \n-\t\tconst horizontalTl = setupAnimation();\n+\t\tconst mainTimeline = setupAnimation();\n \n \t\t// Set up individual card animations\n \t\tcardsRef.current.forEach((card, index) => {",
                    "refToolCallId": "toolu_01HvEwwQEPjQwjd5WKFuSqWF"
                },
                {
                    "type": "text",
                    "text": "Now let me update the card animations to work properly with both horizontal and vertical layouts:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01WmWHwm65uoe3tDrdzY9Ffy",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -168,6 +168,11 @@\n \t\tconst mainTimeline = setupAnimation();\n \n \t\t// Set up individual card animations\n+\t\tconst viewportWidth = window.innerWidth;\n+\t\tconst isMobile = viewportWidth <= 768;\n+\t\tconst isTablet = viewportWidth <= 1024 && viewportWidth > 768;\n+\t\tconst isDesktop = viewportWidth > 1024;\n+\n \t\tcardsRef.current.forEach((card, index) => {\n \t\t\tif (!card) return;\n \n@@ -186,7 +191,7 @@\n \t\t\t\tgsap.set(textElements, {\n \t\t\t\t\topacity: 0,\n \t\t\t\t\ty: 50,\n-\t\t\t\t\tx: -30,\n+\t\t\t\t\tx: isMobile || isTablet ? 0 : -30,\n \t\t\t\t});\n \t\t\t}\n \n@@ -198,17 +203,33 @@\n \t\t\t\t});\n \t\t\t}\n \n-\t\t\t// Create reveal animation for each card\n-\t\t\tconst cardTl = gsap.timeline({\n-\t\t\t\tscrollTrigger: {\n-\t\t\t\t\ttrigger: card,\n-\t\t\t\t\tstart: \"left 80%\",\n-\t\t\t\t\tend: \"left 20%\",\n-\t\t\t\t\tscrub: 1,\n-\t\t\t\t\thorizontal: true,\n-\t\t\t\t\tcontainerAnimation: horizontalTl,\n-\t\t\t\t}\n-\t\t\t});\n+\t\t\t// Create reveal animation for each card based on device type\n+\t\t\tlet cardTl;\n+\t\t\t\n+\t\t\tif (isMobile || isTablet) {\n+\t\t\t\t// Vertical scroll animation for mobile/tablet\n+\t\t\t\tcardTl = gsap.timeline({\n+\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\tstart: \"top 80%\",\n+\t\t\t\t\t\tend: \"top 20%\",\n+\t\t\t\t\t\tscrub: 1,\n+\t\t\t\t\t\tcontainerAnimation: mainTimeline,\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t} else {\n+\t\t\t\t// Horizontal scroll animation for desktop\n+\t\t\t\tcardTl = gsap.timeline({\n+\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\tstart: \"left 80%\",\n+\t\t\t\t\t\tend: \"left 20%\",\n+\t\t\t\t\t\tscrub: 1,\n+\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\tcontainerAnimation: mainTimeline,\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n \n \t\t\t// Animate content reveal\n \t\t\tif (content) {\n@@ -230,7 +251,7 @@\n \t\t\t\t\t}, 0.2);\n \t\t\t}\n \n-\t\t\t// Animate image reveal with parallax\n+\t\t\t// Animate image reveal\n \t\t\tif (image) {\n \t\t\t\tcardTl.to(image, {\n \t\t\t\t\topacity: 1,\n@@ -241,35 +262,38 @@\n \t\t\t\t}, 0.4);\n \t\t\t}\n \n-\t\t\t// Parallax effect for background elements\n-\t\t\tif (parallaxElement) {\n-\t\t\t\tgsap.to(parallaxElement, {\n-\t\t\t\t\tx: -100,\n-\t\t\t\t\tscrollTrigger: {\n-\t\t\t\t\t\ttrigger: card,\n-\t\t\t\t\t\tstart: \"left right\",\n-\t\t\t\t\t\tend: \"right left\",\n-\t\t\t\t\t\tscrub: 2,\n-\t\t\t\t\t\thorizontal: true,\n-\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\t// Additional parallax for images\n-\t\t\tif (image) {\n-\t\t\t\tgsap.to(image, {\n-\t\t\t\t\tx: 50,\n-\t\t\t\t\trotation: 0,\n-\t\t\t\t\tscrollTrigger: {\n-\t\t\t\t\t\ttrigger: card,\n-\t\t\t\t\t\tstart: \"left right\",\n-\t\t\t\t\t\tend: \"right left\",\n-\t\t\t\t\t\tscrub: 3,\n-\t\t\t\t\t\thorizontal: true,\n-\t\t\t\t\t\tcontainerAnimation: horizontalTl,\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t// Parallax effects only for desktop\n+\t\t\tif (isDesktop) {\n+\t\t\t\t// Parallax effect for background elements\n+\t\t\t\tif (parallaxElement) {\n+\t\t\t\t\tgsap.to(parallaxElement, {\n+\t\t\t\t\t\tx: -100,\n+\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\tstart: \"left right\",\n+\t\t\t\t\t\t\tend: \"right left\",\n+\t\t\t\t\t\t\tscrub: 2,\n+\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\tcontainerAnimation: mainTimeline,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\n+\t\t\t\t// Additional parallax for images\n+\t\t\t\tif (image) {\n+\t\t\t\t\tgsap.to(image, {\n+\t\t\t\t\t\tx: 50,\n+\t\t\t\t\t\trotation: 0,\n+\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\tstart: \"left right\",\n+\t\t\t\t\t\t\tend: \"right left\",\n+\t\t\t\t\t\t\tscrub: 3,\n+\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\tcontainerAnimation: mainTimeline,\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n \t\t\t}\n \t\t});\n ",
                    "refToolCallId": "toolu_01WmWHwm65uoe3tDrdzY9Ffy"
                },
                {
                    "type": "text",
                    "text": "Now let me update the resize handler to properly reinitialize the animations:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01W9NBrVhoHUkivEB5vSKv3j",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -305,8 +305,139 @@\n \t\tconst handleResize = () => {\n \t\t\tclearTimeout(resizeTimeout);\n \t\t\tresizeTimeout = setTimeout(() => {\n+\t\t\t\t// Kill all existing ScrollTriggers\n+\t\t\t\tScrollTrigger.getAll().forEach(trigger => trigger.kill());\n+\t\t\t\t\n+\t\t\t\t// Re-setup animations with new dimensions\n+\t\t\t\tconst newMainTimeline = setupAnimation();\n+\t\t\t\t\n+\t\t\t\t// Re-setup card animations\n+\t\t\t\tconst newViewportWidth = window.innerWidth;\n+\t\t\t\tconst newIsMobile = newViewportWidth <= 768;\n+\t\t\t\tconst newIsTablet = newViewportWidth <= 1024 && newViewportWidth > 768;\n+\t\t\t\tconst newIsDesktop = newViewportWidth > 1024;\n+\n+\t\t\t\tcardsRef.current.forEach((card, index) => {\n+\t\t\t\t\tif (!card) return;\n+\n+\t\t\t\t\tconst content = contentRefs.current[index];\n+\t\t\t\t\tconst image = imageRefs.current[index];\n+\t\t\t\t\tconst parallaxElement = parallaxRefs.current[index];\n+\n+\t\t\t\t\t// Reset initial states\n+\t\t\t\t\tgsap.set([content, image], {\n+\t\t\t\t\t\topacity: 0,\n+\t\t\t\t\t\ty: 100,\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (content) {\n+\t\t\t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n+\t\t\t\t\t\tgsap.set(textElements, {\n+\t\t\t\t\t\t\topacity: 0,\n+\t\t\t\t\t\t\ty: 50,\n+\t\t\t\t\t\t\tx: newIsMobile || newIsTablet ? 0 : -30,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (image) {\n+\t\t\t\t\t\tgsap.set(image, {\n+\t\t\t\t\t\t\topacity: 0,\n+\t\t\t\t\t\t\tscale: 0.8,\n+\t\t\t\t\t\t\trotation: 0,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Create new reveal animation\n+\t\t\t\t\tlet cardTl;\n+\t\t\t\t\t\n+\t\t\t\t\tif (newIsMobile || newIsTablet) {\n+\t\t\t\t\t\tcardTl = gsap.timeline({\n+\t\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\t\tstart: \"top 80%\",\n+\t\t\t\t\t\t\t\tend: \"top 20%\",\n+\t\t\t\t\t\t\t\tscrub: 1,\n+\t\t\t\t\t\t\t\tcontainerAnimation: newMainTimeline,\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tcardTl = gsap.timeline({\n+\t\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\t\tstart: \"left 80%\",\n+\t\t\t\t\t\t\t\tend: \"left 20%\",\n+\t\t\t\t\t\t\t\tscrub: 1,\n+\t\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\t\tcontainerAnimation: newMainTimeline,\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Re-animate content reveal\n+\t\t\t\t\tif (content) {\n+\t\t\t\t\t\tconst textElements = content.querySelectorAll('h4, h2, p, a, div');\n+\t\t\t\t\t\tcardTl\n+\t\t\t\t\t\t\t.to(content, {\n+\t\t\t\t\t\t\t\topacity: 1,\n+\t\t\t\t\t\t\t\ty: 0,\n+\t\t\t\t\t\t\t\tduration: 0.6,\n+\t\t\t\t\t\t\t\tease: \"power2.out\",\n+\t\t\t\t\t\t\t}, 0)\n+\t\t\t\t\t\t\t.to(textElements, {\n+\t\t\t\t\t\t\t\topacity: 1,\n+\t\t\t\t\t\t\t\ty: 0,\n+\t\t\t\t\t\t\t\tx: 0,\n+\t\t\t\t\t\t\t\tduration: 0.8,\n+\t\t\t\t\t\t\t\tstagger: 0.1,\n+\t\t\t\t\t\t\t\tease: \"power2.out\",\n+\t\t\t\t\t\t\t}, 0.2);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (image) {\n+\t\t\t\t\t\tcardTl.to(image, {\n+\t\t\t\t\t\t\topacity: 1,\n+\t\t\t\t\t\t\tscale: 1,\n+\t\t\t\t\t\t\trotation: 0,\n+\t\t\t\t\t\t\tduration: 1,\n+\t\t\t\t\t\t\tease: \"back.out(1.7)\",\n+\t\t\t\t\t\t}, 0.4);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Re-setup parallax for desktop only\n+\t\t\t\t\tif (newIsDesktop) {\n+\t\t\t\t\t\tif (parallaxElement) {\n+\t\t\t\t\t\t\tgsap.to(parallaxElement, {\n+\t\t\t\t\t\t\t\tx: -100,\n+\t\t\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\t\t\tstart: \"left right\",\n+\t\t\t\t\t\t\t\t\tend: \"right left\",\n+\t\t\t\t\t\t\t\t\tscrub: 2,\n+\t\t\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\t\t\tcontainerAnimation: newMainTimeline,\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tif (image) {\n+\t\t\t\t\t\t\tgsap.to(image, {\n+\t\t\t\t\t\t\t\tx: 50,\n+\t\t\t\t\t\t\t\trotation: 0,\n+\t\t\t\t\t\t\t\tscrollTrigger: {\n+\t\t\t\t\t\t\t\t\ttrigger: card,\n+\t\t\t\t\t\t\t\t\tstart: \"left right\",\n+\t\t\t\t\t\t\t\t\tend: \"right left\",\n+\t\t\t\t\t\t\t\t\tscrub: 3,\n+\t\t\t\t\t\t\t\t\thorizontal: true,\n+\t\t\t\t\t\t\t\t\tcontainerAnimation: newMainTimeline,\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\t\n \t\t\t\tScrollTrigger.refresh();\n-\t\t\t}, 250);\n+\t\t\t}, 300);\n \t\t};\n \n \t\twindow.addEventListener('resize', handleResize);",
                    "refToolCallId": "toolu_01W9NBrVhoHUkivEB5vSKv3j"
                },
                {
                    "type": "text",
                    "text": "Now let me update the scrollToCard function to work properly with the new responsive logic:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ATVprgGbQCTrsCxGZgzEK3",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -454,23 +454,24 @@\n \t\tif (!containerRef.current) return;\n \n \t\tconst viewportWidth = window.innerWidth;\n+\t\tconst viewportHeight = window.innerHeight;\n \t\tconst isMobile = viewportWidth <= 768;\n \t\tconst isTablet = viewportWidth <= 1024 && viewportWidth > 768;\n-\n-\t\tconst totalWidth = cardData.length * viewportWidth;\n-\t\tconst scrollDistance = totalWidth - viewportWidth;\n-\n-\t\t// Calculate adjusted scroll distance (same logic as in useEffect)\n-\t\tlet adjustedScrollDistance = scrollDistance;\n-\t\tif (isMobile) {\n-\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2);\n-\t\t} else if (isTablet) {\n-\t\t\tadjustedScrollDistance = Math.min(scrollDistance, viewportWidth * 2.5);\n+\t\tconst isDesktop = viewportWidth > 1024;\n+\n+\t\tlet targetScrollY;\n+\n+\t\tif (isMobile || isTablet) {\n+\t\t\t// For mobile/tablet, calculate vertical scroll position\n+\t\t\tconst progress = index / (cardData.length - 1);\n+\t\t\ttargetScrollY = containerRef.current.offsetTop + ((cardData.length - 1) * viewportHeight * progress);\n+\t\t} else {\n+\t\t\t// For desktop, calculate horizontal scroll position\n+\t\t\tconst totalWidth = cardData.length * viewportWidth;\n+\t\t\tconst scrollDistance = totalWidth - viewportWidth;\n+\t\t\tconst progress = index / (cardData.length - 1);\n+\t\t\ttargetScrollY = containerRef.current.offsetTop + (scrollDistance * progress);\n \t\t}\n-\n-\t\t// Calculate proportional scroll position\n-\t\tconst progress = index / (cardData.length - 1);\n-\t\tconst targetScrollY = containerRef.current.offsetTop + (adjustedScrollDistance * progress);\n \n \t\tgsap.to(window, {\n \t\t\tscrollTo: {",
                    "refToolCallId": "toolu_01ATVprgGbQCTrsCxGZgzEK3"
                },
                {
                    "type": "text",
                    "text": "Now let me update the JSX structure to better handle the responsive layout. I need to modify the scroll container to work properly with both horizontal and vertical layouts:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ECjxTm8zvspKBAAq7vxvSF",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -488,10 +488,10 @@\n \t\t\tclassName=\"w-full h-screen relative overflow-hidden\"\n \t\t\tref={containerRef}>\n \n-\t\t\t{/* Horizontal Scroll Container */}\n+\t\t\t{/* Responsive Scroll Container */}\n \t\t\t<div\n \t\t\t\tref={scrollContainerRef}\n-\t\t\t\tclassName=\"flex h-full\">\n+\t\t\t\tclassName=\"flex h-full lg:flex-row xm:flex-col sm:flex-col md:flex-col\">\n \n \t\t\t\t{cardData.map((card, index) => (\n \t\t\t\t\t<div\n@@ -499,7 +499,7 @@\n \t\t\t\t\t\tref={(el) => {\n \t\t\t\t\t\t\tif (el) cardsRef.current[index] = el;\n \t\t\t\t\t\t}}\n-\t\t\t\t\t\tclassName=\"w-screen h-full flex-shrink-0 relative flex items-center justify-center\"\n+\t\t\t\t\t\tclassName=\"w-screen h-full flex-shrink-0 relative flex items-center justify-center lg:w-screen xm:w-full sm:w-full md:w-full xm:h-screen sm:h-screen md:h-screen\"\n \t\t\t\t\t\tstyle={{ backgroundColor: card.bgColor }}>\n \n \t\t\t\t\t\t{/* Parallax Background Element */}\n@@ -514,7 +514,7 @@\n \t\t\t\t\t\t/>\n \n \t\t\t\t\t\t{/* Card Content */}\n-\t\t\t\t\t\t<div className=\"w-full max-w-7xl h-full flex items-center justify-between gap-8 px-6 xm:flex-col xm:justify-center xm:gap-6 sm:flex-col sm:justify-center sm:gap-8 relative z-10\">\n+\t\t\t\t\t\t<div className=\"w-full max-w-7xl h-full flex items-center justify-between gap-8 px-6 lg:flex-row lg:justify-between xm:flex-col xm:justify-center xm:gap-6 sm:flex-col sm:justify-center sm:gap-8 md:flex-col md:justify-center md:gap-8 relative z-10\">\n \n \t\t\t\t\t\t\t{/* Content Section */}\n \t\t\t\t\t\t\t<div",
                    "refToolCallId": "toolu_01ECjxTm8zvspKBAAq7vxvSF"
                },
                {
                    "type": "text",
                    "text": "Now let me update the content and image sections to be more responsive:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01SAmAZSZn3XxpNzNyvaqni8",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -521,17 +521,17 @@\n \t\t\t\t\t\t\t\tref={(el) => {\n \t\t\t\t\t\t\t\t\tif (el) contentRefs.current[index] = el;\n \t\t\t\t\t\t\t\t}}\n-\t\t\t\t\t\t\t\tclassName=\"w-1/2 xm:w-full sm:w-full flex flex-col justify-center gap-8 xm:gap-4 sm:gap-6 px-8 xm:px-4 sm:px-6 xm:text-center sm:text-center\">\n-\n-\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-4 xm:gap-3 sm:gap-4\">\n+\t\t\t\t\t\t\t\tclassName=\"lg:w-1/2 xm:w-full sm:w-full md:w-full flex flex-col justify-center gap-8 xm:gap-4 sm:gap-6 md:gap-6 px-8 xm:px-4 sm:px-6 md:px-6 lg:text-left xm:text-center sm:text-center md:text-center\">\n+\n+\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-4 xm:gap-3 sm:gap-4 md:gap-4\">\n \t\t\t\t\t\t\t\t\t<h4\n-\t\t\t\t\t\t\t\t\t\tclassName=\"text-2xl xm:text-lg sm:text-xl leading-tight tracking-tighter opacity-80\"\n+\t\t\t\t\t\t\t\t\t\tclassName=\"text-2xl xm:text-lg sm:text-xl md:text-xl leading-tight tracking-tighter opacity-80\"\n \t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n \t\t\t\t\t\t\t\t\t\t{card.title}\n \t\t\t\t\t\t\t\t\t</h4>\n \n \t\t\t\t\t\t\t\t\t<h2\n-\t\t\t\t\t\t\t\t\t\tclassName=\"text-7xl xm:text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold leading-tight tracking-tighter\"\n+\t\t\t\t\t\t\t\t\t\tclassName=\"text-7xl xm:text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold leading-tight tracking-tighter\"\n \t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n \t\t\t\t\t\t\t\t\t\t{card.heading1}\n \t\t\t\t\t\t\t\t\t\t<br />\n@@ -539,17 +539,17 @@\n \t\t\t\t\t\t\t\t\t</h2>\n \n \t\t\t\t\t\t\t\t\t<p\n-\t\t\t\t\t\t\t\t\t\tclassName=\"text-xl xm:text-base sm:text-lg leading-relaxed tracking-tight max-w-lg xm:max-w-none sm:max-w-none\"\n+\t\t\t\t\t\t\t\t\t\tclassName=\"text-xl xm:text-sm sm:text-base md:text-lg lg:text-xl leading-relaxed tracking-tight max-w-lg xm:max-w-none sm:max-w-none md:max-w-none\"\n \t\t\t\t\t\t\t\t\t\tstyle={{ color: card.textColor }}>\n \t\t\t\t\t\t\t\t\t\t{card.para}\n \t\t\t\t\t\t\t\t\t</p>\n \t\t\t\t\t\t\t\t</div>\n \n-\t\t\t\t\t\t\t\t<div className=\"w-fit xm:w-full sm:w-full flex flex-col gap-2 xm:items-center sm:items-center\">\n+\t\t\t\t\t\t\t\t<div className=\"w-fit xm:w-full sm:w-full md:w-full lg:w-fit flex flex-col gap-2 xm:items-center sm:items-center md:items-center lg:items-start\">\n \t\t\t\t\t\t\t\t\t<Link\n \t\t\t\t\t\t\t\t\t\tkey={card.id}\n \t\t\t\t\t\t\t\t\t\tstyle={{ color: card.linkColor }}\n-\t\t\t\t\t\t\t\t\t\tclassName=\"text-lg xm:text-base sm:text-lg font-medium leading-tight tracking-tight hover:opacity-80 transition-opacity duration-300 relative group\"\n+\t\t\t\t\t\t\t\t\t\tclassName=\"text-lg xm:text-sm sm:text-base md:text-lg font-medium leading-tight tracking-tight hover:opacity-80 transition-opacity duration-300 relative group\"\n \t\t\t\t\t\t\t\t\t\thref={card.href}>\n \t\t\t\t\t\t\t\t\t\t{card.href}\n \t\t\t\t\t\t\t\t\t\t<span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-current transition-all duration-300 group-hover:w-full\" style={{ backgroundColor: card.linkColor }}></span>\n@@ -562,9 +562,9 @@\n \t\t\t\t\t\t\t\tref={(el) => {\n \t\t\t\t\t\t\t\t\tif (el) imageRefs.current[index] = el;\n \t\t\t\t\t\t\t\t}}\n-\t\t\t\t\t\t\t\tclassName=\"w-1/2 xm:w-full sm:w-full flex items-center justify-center p-8 xm:p-4 sm:p-6\">\n-\n-\t\t\t\t\t\t\t\t<div className=\"relative w-full max-w-md xm:max-w-sm sm:max-w-md\">\n+\t\t\t\t\t\t\t\tclassName=\"lg:w-1/2 xm:w-full sm:w-full md:w-full flex items-center justify-center p-8 xm:p-4 sm:p-6 md:p-6\">\n+\n+\t\t\t\t\t\t\t\t<div className=\"relative w-full max-w-md xm:max-w-xs sm:max-w-sm md:max-w-md\">\n \t\t\t\t\t\t\t\t\t{/* Image Glow Effect */}\n \t\t\t\t\t\t\t\t\t<div\n \t\t\t\t\t\t\t\t\t\tclassName=\"absolute inset-0 rounded-2xl blur-2xl opacity-20\"",
                    "refToolCallId": "toolu_01SAmAZSZn3XxpNzNyvaqni8"
                },
                {
                    "type": "text",
                    "text": "Finally, let me update the scroll hint to be more responsive:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01MrG1vjMwQ8yEwkJe1NdGUx",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -585,12 +585,12 @@\n \t\t\t</div>\n \n \t\t\t{/* Scroll Hint */}\n-\t\t\t<div className={`fixed bottom-20 left-1/2 transform -translate-x-1/2 transition-opacity duration-1000 z-40 xm:bottom-16 sm:bottom-18 ${isLoaded ? 'opacity-100' : 'opacity-0'}`}>\n+\t\t\t<div className={`fixed bottom-20 left-1/2 transform -translate-x-1/2 transition-opacity duration-1000 z-40 xm:bottom-12 sm:bottom-16 md:bottom-18 lg:bottom-20 ${isLoaded ? 'opacity-100' : 'opacity-0'}`}>\n \t\t\t\t<div className=\"flex items-center gap-2 text-white/70 animate-bounce\">\n-\t\t\t\t\t<svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n+\t\t\t\t\t<svg className=\"w-4 h-4 xm:w-3 xm:h-3 sm:w-4 sm:h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n \t\t\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 14l-7 7m0 0l-7-7m7 7V3\" />\n \t\t\t\t\t</svg>\n-\t\t\t\t\t<span className=\"text-sm font-medium\">Scroll to explore</span>\n+\t\t\t\t\t<span className=\"text-sm font-medium xm:text-xs sm:text-sm\">Scroll to explore</span>\n \t\t\t\t</div>\n \t\t\t</div>\n \t\t</div>",
                    "refToolCallId": "toolu_01MrG1vjMwQ8yEwkJe1NdGUx"
                },
                {
                    "type": "text",
                    "text": "Now let me check if there are any missing dependencies that might be needed for the ScrollTo plugin:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01DfWx7t8a6a9xZKr7EygKSg",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -5,6 +5,7 @@\n import { useTranslations } from \"next-intl\";\n import { gsap } from \"gsap\";\n import { ScrollTrigger } from \"gsap/ScrollTrigger\";\n+import { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\n import {\n \twhatwedoImg1,\n \twhatwedoImg2,",
                    "refToolCallId": "toolu_01DfWx7t8a6a9xZKr7EygKSg"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ShAkVJi9jE3EDEy8HecuZj",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "components/wwd-cards.tsx",
                                "fsPath": "/Users/samanyu/Desktop/supadupa-website-clone-master/components/wwd-cards.tsx"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- components/wwd-cards.tsx\n+++ components/wwd-cards.tsx\n@@ -13,9 +13,9 @@\n \twhatwedoImg4,\n } from \"@/public\";\n \n-// Register ScrollTrigger plugin\n+// Register GSAP plugins\n if (typeof window !== \"undefined\") {\n-\tgsap.registerPlugin(ScrollTrigger);\n+\tgsap.registerPlugin(ScrollTrigger, ScrollToPlugin);\n }\n \n interface CardData {",
                    "refToolCallId": "toolu_01ShAkVJi9jE3EDEy8HecuZj"
                },
                {
                    "type": "text",
                    "text": "Perfect! I've successfully fixed the responsiveness issues in the `components/wwd-cards.tsx` file. Here's a summary of the key improvements made:\n\n## **Fixed Issues:**\n\n### **1. Responsive Layout Logic**\n- **Before**: Used inconsistent breakpoint calculations that caused issues on different screen sizes\n- **After**: Implemented proper responsive logic with clear breakpoints:\n  - Mobile: ≤ 768px (vertical scrolling)\n  - Tablet: 769px - 1024px (vertical scrolling)  \n  - Desktop: > 1024px (horizontal scrolling)\n\n### **2. Scroll Container Behavior**\n- **Before**: Always used horizontal scrolling with problematic width calculations\n- **After**: \n  - **Mobile/Tablet**: Uses vertical scrolling with proper height calculations\n  - **Desktop**: Uses horizontal scrolling with accurate width calculations\n  - Proper container reset on resize to prevent layout conflicts\n\n### **3. Animation System**\n- **Before**: All animations assumed horizontal scrolling\n- **After**: \n  - **Mobile/Tablet**: Vertical-based scroll triggers (`\"top 80%\"` to `\"top 20%\"`)\n  - **Desktop**: Horizontal-based scroll triggers (`\"left 80%\"` to `\"left 20%\"`)\n  - Parallax effects only enabled on desktop for better performance\n\n### **4. Resize Handling**\n- **Before**: Simple `ScrollTrigger.refresh()` that didn't account for layout changes\n- **After**: Complete re-initialization of animations on resize:\n  - Kills all existing ScrollTriggers\n  - Re-calculates dimensions and breakpoints\n  - Re-creates appropriate animations for new screen size\n  - Prevents memory leaks and animation conflicts\n\n### **5. CSS Classes & Layout**\n- **Before**: Inconsistent responsive classes\n- **After**: \n  - Comprehensive responsive classes for all breakpoints\n  - Better text sizing: `xm:text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl`\n  - Improved spacing and alignment for each device type\n  - Proper image sizing constraints\n\n### **6. ScrollToCard Function**\n- **Before**: Used the same calculation logic regardless of device\n- **After**: Device-specific scroll calculations:\n  - **Mobile/Tablet**: Vertical scroll position based on viewport height\n  - **Desktop**: Horizontal scroll position based on viewport width\n\n### **7. Plugin Registration**\n- **Before**: Only registered ScrollTrigger\n- **After**: Added ScrollToPlugin registration for proper scroll-to functionality\n\n## **Key Benefits:**\n\n1. **Better Mobile Experience**: Cards now stack vertically and scroll naturally on mobile devices\n2. **Improved Tablet Support**: Proper vertical scrolling with optimized spacing\n3. **Enhanced Desktop Performance**: Maintains smooth horizontal scrolling with parallax effects\n4. **Responsive Text**: Text sizes now scale appropriately across all devices\n5. **Smooth Transitions**: Proper animation cleanup and re-initialization on screen rotation/resize\n6. **Memory Efficiency**: Prevents ScrollTrigger memory leaks with proper cleanup\n\nThe component now provides a seamless experience across all device sizes, with appropriate scrolling behavior and animations for each breakpoint."
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "components/wwd-cards.tsx",
                            "patch": "@@ -248,16 +248,70 @@\n igger%22;%0A\n+import %7B ScrollToPlugin %7D from %22gsap/ScrollToPlugin%22;%0A\n import %7B\n@@ -407,28 +407,20 @@\n ter \n-ScrollTrigger\n+GSAP\n  plugin\n+s\n %0Aif \n@@ -487,16 +487,32 @@\n lTrigger\n+, ScrollToPlugin\n );%0A%7D%0A%0Ain\n@@ -1098,84 +1098,8 @@\n e);%0A\n-%09const %5BviewportSize, setViewportSize%5D = useState(%7B width: 0, height: 0 %7D);%0A\n %09con\n@@ -2195,622 +2195,8 @@\n %5D;%0A%0A\n-%09// Helper function to get device breakpoints%0A%09const getDeviceInfo = (width: number) =%3E %7B%0A%09%09return %7B%0A%09%09%09isMobile: width %3C= 768,%0A%09%09%09isTablet: width %3E 768 && width %3C= 1024,%0A%09%09%09isDesktop: width %3E 1024,%0A%09%09%09isLargeDesktop: width %3E 1440,%0A%09%09%09isUltrawide: width %3E 1920,%0A%09%09%7D;%0A%09%7D;%0A%0A%09// Update viewport size%0A%09useEffect(() =%3E %7B%0A%09%09const updateViewportSize = () =%3E %7B%0A%09%09%09setViewportSize(%7B%0A%09%09%09%09width: window.innerWidth,%0A%09%09%09%09height: window.innerHeight,%0A%09%09%09%7D);%0A%09%09%7D;%0A%0A%09%09updateViewportSize();%0A%09%09window.addEventListener('resize', updateViewportSize);%0A%0A%09%09return () =%3E window.removeEventListener('resize', updateViewportSize);%0A%09%7D, %5B%5D);%0A%0A\n %09use\n@@ -2272,36 +2272,8 @@\n rent\n- %7C%7C viewportSize.width === 0\n ) re\n@@ -2413,33 +2413,24 @@\n %3E %7B%0A%09%09%09const\n- %7B width:\n  viewportWid\n@@ -2435,49 +2435,74 @@\n idth\n-, height: viewportHeight %7D = viewportSize\n+ = window.innerWidth;%0A%09%09%09const viewportHeight = window.innerHeight\n ;%0A%09%09\n@@ -2503,26 +2503,24 @@\n ht;%0A%09%09%09const\n- %7B\n  isMobile, i\n@@ -2520,453 +2520,492 @@\n bile\n-, isTablet, isDesktop, isLargeDesktop, isUltrawide %7D = getDeviceInfo(viewportWidth);%0A%0A%09%09%09// Calculate scroll distance based on device type%0A%09%09%09let scrollMultiplier: number;%0A%09%09%09let minScrollDistance: number;%0A%0A%09%09%09if (isMobile) %7B%0A%09%09%09%09scrollMultiplier = 2.5; // Reduced for mobile%0A%09%09%09%09minScrollDistance = viewportWidth * 1.5;%0A%09%09%09%7D else if (isTablet) %7B%0A%09%09%09%09scrollMultiplier = 3;%0A%09%09%09%09minScrollDistance = viewportWidth * 2;%0A%09%09%09%7D else if (isUltrawide) \n+ = viewportWidth %3C= 768;%0A%09%09%09const isTablet = viewportWidth %3C= 1024 && viewportWidth %3E 768;%0A%09%09%09const isDesktop = viewportWidth %3E 1024;%0A%0A%09%09%09// For mobile and tablet, use vertical scrolling approach%0A%09%09%09if (isMobile %7C%7C isTablet) %7B%0A%09%09%09%09// Reset any horizontal transforms%0A%09%09%09%09gsap.set(scrollContainer, %7B%0A%09%09%09%09%09x: 0,%0A%09%09%09%09%09width: %22100%25%22,%0A%09%09%09%09%09height: %22auto%22,%0A%09%09%09%09%09minHeight: %60$%7BcardData.length * 100%7Dvh%60,%0A%09%09%09%09%7D);%0A%0A%09%09%09%09// Create vertical scroll timeline%0A%09%09%09%09const verticalTl = gsap.timeline(\n %7B%0A\n+%09\n %09%09%09%09\n@@ -3014,336 +3014,339 @@\n roll\n-Multiplier = 4; // More scroll for ultrawide%0A%09%09%09%09minScrollDistance = viewportWidth * 3;%0A%09%09%09%7D else if (isLargeDesktop) %7B%0A%09%09%09%09scrollMultiplier = 3.5;%0A%09%09%09%09minScrollDistance = viewportWidth * 2.5;%0A%09%09%09%7D else %7B%0A%09%09%09%09scrollMultiplier = 3;%0A%09%09%09%09minScrollDistance = viewportWidth * 2;%0A%09%09%09%7D%0A%0A%09%09%09// Calculate total width and scroll distance%0A\n+Trigger: %7B%0A%09%09%09%09%09%09trigger: container,%0A%09%09%09%09%09%09start: %22top top%22,%0A%09%09%09%09%09%09end: () =%3E %60+=$%7B(cardData.length - 1) * viewportHeight%7D%60,%0A%09%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09%09pin: true,%0A%09%09%09%09%09%09anticipatePin: 1,%0A%09%09%09%09%09%09invalidateOnRefresh: true,%0A%09%09%09%09%09%09refreshPriority: -1,%0A%09%09%09%09%09%7D,%0A%09%09%09%09%7D);%0A%0A%09%09%09%09return verticalTl;%0A%09%09%09%7D else %7B%0A%09%09%09%09// Desktop horizontal scrolling%0A%09\n %09%09%09c\n@@ -3399,27 +3399,24 @@\n dth;%0A%09%09%09\n+%09\n const \n-baseS\n+s\n crollDis\n@@ -3455,1175 +3455,945 @@\n th;%0A\n-%09%09%09const scrollDistance = Math.max(baseScrollDistance * scrollMultiplier, minScrollDistance);%0A%0A%09%09%09// Set container height based on device%0A%09%09%09const containerHeight = isMobile ? '100svh' : '100vh';%0A%0A%09%09%09// Set up horizontal scroll container%0A%09%09%09gsap.set(scrollContainer, %7B%0A%09%09%09%09width: totalWidth,%0A%09%09%09%09height: containerHeight,%0A%09%09%09%7D);%0A%0A%09%09%09// Clean up existing ScrollTriggers%0A%09%09%09ScrollTrigger.getAll().forEach(trigger =%3E trigger.kill());%0A%0A%09%09%09// Create horizontal scroll timeline%0A%09%09%09const horizontalTl = gsap.timeline(%7B%0A%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09trigger: container,%0A%09%09%09%09%09start: %22top top%22,%0A%09%09%09%09%09end: () =%3E %60+=$%7BscrollDistance%7D%60,%0A%09%09%09%09%09scrub: true,%0A%09%09%09%09%09pin: true,%0A%09%09%09%09%09anticipatePin: 1,%0A%09%09%09%09%09invalidateOnRefresh: true,%0A%09%09%09%09%09refreshPriority: -1,%0A%09%09%09%09%09onUpdate: (self) =%3E %7B%0A%09%09%09%09%09%09// Optional: Add scroll progress callback%0A%09%09%09%09%09%09const progress = self.progress;%0A%09%09%09%09%09%09// You can use this for additional effects%0A%09%09%09%09%09%7D,%0A%09%09%09%09%7D,%0A%09%09%09%7D);%0A%0A%09%09%09// Animate horizontal movement with easing%0A%09%09%09horizontalTl.to(scrollContainer, %7B%0A%09%09%09%09x: -baseScrollDistance,%0A%09%09%09%09ease: %22none%22,%0A%09%09%09%7D);%0A%0A%09%09%09return horizontalTl;%0A%09%09%7D;%0A%0A%09%09const horizontalTl = setupAnimation();%0A%0A%09%09// Set up individual card animations\n+%0A%09%09%09%09// Set up horizontal scroll container%0A%09%09%09%09gsap.set(scrollContainer, %7B%0A%09%09%09%09%09width: totalWidth,%0A%09%09%09%09%09height: %22100vh%22,%0A%09%09%09%09%09x: 0, // Reset any previous transforms%0A%09%09%09%09%7D);%0A%0A%09%09%09%09// Create horizontal scroll timeline%0A%09%09%09%09const horizontalTl = gsap.timeline(%7B%0A%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09trigger: container,%0A%09%09%09%09%09%09start: %22top top%22,%0A%09%09%09%09%09%09end: () =%3E %60+=$%7BscrollDistance%7D%60,%0A%09%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09%09pin: true,%0A%09%09%09%09%09%09anticipatePin: 1,%0A%09%09%09%09%09%09invalidateOnRefresh: true,%0A%09%09%09%09%09%09refreshPriority: -1,%0A%09%09%09%09%09%7D,%0A%09%09%09%09%7D);%0A%0A%09%09%09%09// Animate horizontal movement%0A%09%09%09%09horizontalTl.to(scrollContainer, %7B%0A%09%09%09%09%09x: -scrollDistance,%0A%09%09%09%09%09ease: %22none%22,%0A%09%09%09%09%7D);%0A%0A%09%09%09%09return horizontalTl;%0A%09%09%09%7D%0A%09%09%7D;%0A%0A%09%09const mainTimeline = setupAnimation();%0A%0A%09%09// Set up individual card animations%0A%09%09const viewportWidth = window.innerWidth;%0A%09%09const isMobile = viewportWidth %3C= 768;%0A%09%09const isTablet = viewportWidth %3C= 1024 && viewportWidth %3E 768;%0A%09%09const isDesktop = viewportWidth %3E 1024;%0A\n %0A%09%09c\n@@ -4696,17 +4696,18 @@\n %0A%09%09%09%09y: \n-5\n+10\n 0,%0A%09%09%09%7D)\n@@ -4857,22 +4857,49 @@\n %09y: \n-30,%0A%09%09%09%09%09x: -2\n+50,%0A%09%09%09%09%09x: isMobile %7C%7C isTablet ? 0 : -3\n 0,%0A%09\n@@ -4980,17 +4980,17 @@\n cale: 0.\n-9\n+8\n ,%0A%09%09%09%09%09r\n@@ -5062,348 +5062,598 @@\n card\n-%0A%09%09%09const cardTl = gsap.timeline(%7B%0A%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09trigger: card,%0A%09%09%09%09%09start: %22left 75%25%22,%0A%09%09%09%09%09end: %22left 25%25%22,%0A%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09containerAnimation: horizontalTl,%0A%09%09%09%09%09onEnter: () =%3E %7B%0A%09%09%09%09%09%09// Card is entering viewport%0A%09%09%09%09%09%7D,%0A%09%09%09%09%09onLeave: () =%3E %7B%0A%09%09%09%09%09%09// Card is leaving viewport%0A%09%09%09%09%09%7D,%0A%09%09%09%09%7D%0A%09%09%09%7D);\n+ based on device type%0A%09%09%09let cardTl;%0A%09%09%09%0A%09%09%09if (isMobile %7C%7C isTablet) %7B%0A%09%09%09%09// Vertical scroll animation for mobile/tablet%0A%09%09%09%09cardTl = gsap.timeline(%7B%0A%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09start: %22top 80%25%22,%0A%09%09%09%09%09%09end: %22top 20%25%22,%0A%09%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09%09containerAnimation: mainTimeline,%0A%09%09%09%09%09%7D%0A%09%09%09%09%7D);%0A%09%09%09%7D else %7B%0A%09%09%09%09// Horizontal scroll animation for desktop%0A%09%09%09%09cardTl = gsap.timeline(%7B%0A%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09start: %22left 80%25%22,%0A%09%09%09%09%09%09end: %22left 20%25%22,%0A%09%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09containerAnimation: mainTimeline,%0A%09%09%09%09%09%7D%0A%09%09%09%09%7D);%0A%09%09%09%7D\n %0A%0A%09%09\n@@ -5844,25 +5844,25 @@\n duration: 0.\n-8\n+6\n ,%0A%09%09%09%09%09%09ease\n@@ -5965,33 +5965,33 @@\n %09%09%09%09duration: 0.\n-6\n+8\n ,%0A%09%09%09%09%09%09stagger:\n@@ -5997,10 +5997,9 @@\n : 0.\n-08\n+1\n ,%0A%09%09\n@@ -6178,1845 +6178,5282 @@\n n: 1\n-.2,%0A%09%09%09%09%09ease: %22back.out(1.2)%22,%0A%09%09%09%09%7D, 0.4);%0A%09%09%09%7D%0A%0A%09%09%09// Subtle parallax effect for background elements%0A%09%09%09if (parallaxElement) %7B%0A%09%09%09%09gsap.to(parallaxElement, %7B%0A%09%09%09%09%09x: -50,%0A%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09start: %22left right%22,%0A%09%09%09%09%09%09end: %22right left%22,%0A%09%09%09%09%09%09scrub: 2,%0A%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09containerAnimation: horizontalTl,%0A%09%09%09%09%09%7D%0A%09%09%09%09%7D);%0A%09%09%09%7D%0A%0A%09%09%09// Image parallax effect%0A%09%09%09if (image) %7B%0A%09%09%09%09gsap.to(image, %7B%0A%09%09%09%09%09x: 25,%0A%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09start: %22left right%22,%0A%09%09%09%09%09%09end: %22right left%22,%0A%09%09%09%09%09%09scrub: 3,%0A%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09containerAnimation: horizontalTl,%0A%09%09%09%09%09%7D%0A%09%09%09%09%7D);%0A%09%09%09%7D%0A%09%09%7D);%0A%0A%09%09// Set loaded state%0A%09%09const loadTimeout = setTimeout(() =%3E setIsLoaded(true), 150);%0A%0A%09%09return () =%3E %7B%0A%09%09%09clearTimeout(loadTimeout);%0A%09%09%09ScrollTrigger.getAll().forEach(trigger =%3E trigger.kill());%0A%09%09%7D;%0A%09%7D, %5BcardData.length, viewportSize%5D);%0A%0A%09// Improved scroll to card function%0A%09const scrollToCard = (index: number) =%3E %7B%0A%09%09if (!containerRef.current) return;%0A%0A%09%09const %7B width: viewportWidth %7D = viewportSize;%0A%09%09const %7B isMobile, isTablet, isLargeDesktop, isUltrawide %7D = getDeviceInfo(viewportWidth);%0A%0A%09%09// Calculate scroll distance (same logic as in useEffect)%0A%09%09let scrollMultiplier: number;%0A%09%09if (isMobile) %7B%0A%09%09%09scrollMultiplier = 2.5;%0A%09%09%7D else if (isTablet) %7B%0A%09%09%09scrollMultiplier = 3;%0A%09%09%7D else if (isUltrawide) %7B%0A%09%09%09scrollMultiplier = 4;%0A%09%09%7D else if (isLargeDesktop) %7B%0A%09%09%09scrollMultiplier = 3.5;%0A%09%09%7D else %7B%0A%09%09%09scrollMultiplier = 3;%0A%09%09%7D%0A%0A%09%09const totalWidth = cardData.length * viewportWidth;%0A%09%09const baseScrollDistance = totalWidth - viewportWidth;%0A%09%09const scrollDistance = baseScrollDistance * scrollMultiplier;%0A%0A%09%09// Calculate target scroll position%0A%09%09const progress = index / (cardData.length - 1);%0A%09%09const targetScrollY = containerRef.current.offsetTop + (scrollDistance * progress);\n+,%0A%09%09%09%09%09ease: %22back.out(1.7)%22,%0A%09%09%09%09%7D, 0.4);%0A%09%09%09%7D%0A%0A%09%09%09// Parallax effects only for desktop%0A%09%09%09if (isDesktop) %7B%0A%09%09%09%09// Parallax effect for background elements%0A%09%09%09%09if (parallaxElement) %7B%0A%09%09%09%09%09gsap.to(parallaxElement, %7B%0A%09%09%09%09%09%09x: -100,%0A%09%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09%09start: %22left right%22,%0A%09%09%09%09%09%09%09end: %22right left%22,%0A%09%09%09%09%09%09%09scrub: 2,%0A%09%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09%09containerAnimation: mainTimeline,%0A%09%09%09%09%09%09%7D%0A%09%09%09%09%09%7D);%0A%09%09%09%09%7D%0A%0A%09%09%09%09// Additional parallax for images%0A%09%09%09%09if (image) %7B%0A%09%09%09%09%09gsap.to(image, %7B%0A%09%09%09%09%09%09x: 50,%0A%09%09%09%09%09%09rotation: 0,%0A%09%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09%09start: %22left right%22,%0A%09%09%09%09%09%09%09end: %22right left%22,%0A%09%09%09%09%09%09%09scrub: 3,%0A%09%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09%09containerAnimation: mainTimeline,%0A%09%09%09%09%09%09%7D%0A%09%09%09%09%09%7D);%0A%09%09%09%09%7D%0A%09%09%09%7D%0A%09%09%7D);%0A%0A%09%09// Set loaded state%0A%09%09setTimeout(() =%3E setIsLoaded(true), 100);%0A%0A%09%09// Handle resize to recalculate on orientation change%0A%09%09let resizeTimeout: NodeJS.Timeout;%0A%09%09const handleResize = () =%3E %7B%0A%09%09%09clearTimeout(resizeTimeout);%0A%09%09%09resizeTimeout = setTimeout(() =%3E %7B%0A%09%09%09%09// Kill all existing ScrollTriggers%0A%09%09%09%09ScrollTrigger.getAll().forEach(trigger =%3E trigger.kill());%0A%09%09%09%09%0A%09%09%09%09// Re-setup animations with new dimensions%0A%09%09%09%09const newMainTimeline = setupAnimation();%0A%09%09%09%09%0A%09%09%09%09// Re-setup card animations%0A%09%09%09%09const newViewportWidth = window.innerWidth;%0A%09%09%09%09const newIsMobile = newViewportWidth %3C= 768;%0A%09%09%09%09const newIsTablet = newViewportWidth %3C= 1024 && newViewportWidth %3E 768;%0A%09%09%09%09const newIsDesktop = newViewportWidth %3E 1024;%0A%0A%09%09%09%09cardsRef.current.forEach((card, index) =%3E %7B%0A%09%09%09%09%09if (!card) return;%0A%0A%09%09%09%09%09const content = contentRefs.current%5Bindex%5D;%0A%09%09%09%09%09const image = imageRefs.current%5Bindex%5D;%0A%09%09%09%09%09const parallaxElement = parallaxRefs.current%5Bindex%5D;%0A%0A%09%09%09%09%09// Reset initial states%0A%09%09%09%09%09gsap.set(%5Bcontent, image%5D, %7B%0A%09%09%09%09%09%09opacity: 0,%0A%09%09%09%09%09%09y: 100,%0A%09%09%09%09%09%7D);%0A%0A%09%09%09%09%09if (content) %7B%0A%09%09%09%09%09%09const textElements = content.querySelectorAll('h4, h2, p, a, div');%0A%09%09%09%09%09%09gsap.set(textElements, %7B%0A%09%09%09%09%09%09%09opacity: 0,%0A%09%09%09%09%09%09%09y: 50,%0A%09%09%09%09%09%09%09x: newIsMobile %7C%7C newIsTablet ? 0 : -30,%0A%09%09%09%09%09%09%7D);%0A%09%09%09%09%09%7D%0A%0A%09%09%09%09%09if (image) %7B%0A%09%09%09%09%09%09gsap.set(image, %7B%0A%09%09%09%09%09%09%09opacity: 0,%0A%09%09%09%09%09%09%09scale: 0.8,%0A%09%09%09%09%09%09%09rotation: 0,%0A%09%09%09%09%09%09%7D);%0A%09%09%09%09%09%7D%0A%0A%09%09%09%09%09// Create new reveal animation%0A%09%09%09%09%09let cardTl;%0A%09%09%09%09%09%0A%09%09%09%09%09if (newIsMobile %7C%7C newIsTablet) %7B%0A%09%09%09%09%09%09cardTl = gsap.timeline(%7B%0A%09%09%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09%09%09start: %22top 80%25%22,%0A%09%09%09%09%09%09%09%09end: %22top 20%25%22,%0A%09%09%09%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09%09%09%09containerAnimation: newMainTimeline,%0A%09%09%09%09%09%09%09%7D%0A%09%09%09%09%09%09%7D);%0A%09%09%09%09%09%7D else %7B%0A%09%09%09%09%09%09cardTl = gsap.timeline(%7B%0A%09%09%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09%09%09start: %22left 80%25%22,%0A%09%09%09%09%09%09%09%09end: %22left 20%25%22,%0A%09%09%09%09%09%09%09%09scrub: 1,%0A%09%09%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09%09%09containerAnimation: newMainTimeline,%0A%09%09%09%09%09%09%09%7D%0A%09%09%09%09%09%09%7D);%0A%09%09%09%09%09%7D%0A%0A%09%09%09%09%09// Re-animate content reveal%0A%09%09%09%09%09if (content) %7B%0A%09%09%09%09%09%09const textElements = content.querySelectorAll('h4, h2, p, a, div');%0A%09%09%09%09%09%09cardTl%0A%09%09%09%09%09%09%09.to(content, %7B%0A%09%09%09%09%09%09%09%09opacity: 1,%0A%09%09%09%09%09%09%09%09y: 0,%0A%09%09%09%09%09%09%09%09duration: 0.6,%0A%09%09%09%09%09%09%09%09ease: %22power2.out%22,%0A%09%09%09%09%09%09%09%7D, 0)%0A%09%09%09%09%09%09%09.to(textElements, %7B%0A%09%09%09%09%09%09%09%09opacity: 1,%0A%09%09%09%09%09%09%09%09y: 0,%0A%09%09%09%09%09%09%09%09x: 0,%0A%09%09%09%09%09%09%09%09duration: 0.8,%0A%09%09%09%09%09%09%09%09stagger: 0.1,%0A%09%09%09%09%09%09%09%09ease: %22power2.out%22,%0A%09%09%09%09%09%09%09%7D, 0.2);%0A%09%09%09%09%09%7D%0A%0A%09%09%09%09%09if (image) %7B%0A%09%09%09%09%09%09cardTl.to(image, %7B%0A%09%09%09%09%09%09%09opacity: 1,%0A%09%09%09%09%09%09%09scale: 1,%0A%09%09%09%09%09%09%09rotation: 0,%0A%09%09%09%09%09%09%09duration: 1,%0A%09%09%09%09%09%09%09ease: %22back.out(1.7)%22,%0A%09%09%09%09%09%09%7D, 0.4);%0A%09%09%09%09%09%7D%0A%0A%09%09%09%09%09// Re-setup parallax for desktop only%0A%09%09%09%09%09if (newIsDesktop) %7B%0A%09%09%09%09%09%09if (parallaxElement) %7B%0A%09%09%09%09%09%09%09gsap.to(parallaxElement, %7B%0A%09%09%09%09%09%09%09%09x: -100,%0A%09%09%09%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09%09%09%09start: %22left right%22,%0A%09%09%09%09%09%09%09%09%09end: %22right left%22,%0A%09%09%09%09%09%09%09%09%09scrub: 2,%0A%09%09%09%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09%09%09%09containerAnimation: newMainTimeline,%0A%09%09%09%09%09%09%09%09%7D%0A%09%09%09%09%09%09%09%7D);%0A%09%09%09%09%09%09%7D%0A%0A%09%09%09%09%09%09if (image) %7B%0A%09%09%09%09%09%09%09gsap.to(image, %7B%0A%09%09%09%09%09%09%09%09x: 50,%0A%09%09%09%09%09%09%09%09rotation: 0,%0A%09%09%09%09%09%09%09%09scrollTrigger: %7B%0A%09%09%09%09%09%09%09%09%09trigger: card,%0A%09%09%09%09%09%09%09%09%09start: %22left right%22,%0A%09%09%09%09%09%09%09%09%09end: %22right left%22,%0A%09%09%09%09%09%09%09%09%09scrub: 3,%0A%09%09%09%09%09%09%09%09%09horizontal: true,%0A%09%09%09%09%09%09%09%09%09containerAnimation: newMainTimeline,%0A%09%09%09%09%09%09%09%09%7D%0A%09%09%09%09%09%09%09%7D);%0A%09%09%09%09%09%09%7D%0A%09%09%09%09%09%7D%0A%09%09%09%09%7D);%0A%09%09%09%09%0A%09%09%09%09ScrollTrigger.refresh();%0A%09%09%09%7D, 300);%0A%09%09%7D;%0A%0A%09%09window.addEventListener('resize', handleResize);%0A%0A%09%09return () =%3E %7B%0A%09%09%09if (resizeTimeout) clearTimeout(resizeTimeout);%0A%09%09%09window.removeEventListener('resize', handleResize);%0A%09%09%09ScrollTrigger.getAll().forEach(trigger =%3E trigger.kill());%0A%09%09%7D;%0A%09%7D, %5BcardData.length%5D);%0A%0A%09// Scroll to specific card%0A%09const scrollToCard = (index: number) =%3E %7B%0A%09%09if (!containerRef.current) return;%0A%0A%09%09const viewportWidth = window.innerWidth;%0A%09%09const viewportHeight = window.innerHeight;%0A%09%09const isMobile = viewportWidth %3C= 768;%0A%09%09const isTablet = viewportWidth %3C= 1024 && viewportWidth %3E 768;%0A%09%09const isDesktop = viewportWidth %3E 1024;%0A%0A%09%09let targetScrollY;%0A%0A%09%09if (isMobile %7C%7C isTablet) %7B%0A%09%09%09// For mobile/tablet, calculate vertical scroll position%0A%09%09%09const progress = index / (cardData.length - 1);%0A%09%09%09targetScrollY = containerRef.current.offsetTop + ((cardData.length - 1) * viewportHeight * progress);%0A%09%09%7D else %7B%0A%09%09%09// For desktop, calculate horizontal scroll position%0A%09%09%09const totalWidth = cardData.length * viewportWidth;%0A%09%09%09const scrollDistance = totalWidth - viewportWidth;%0A%09%09%09const progress = index / (cardData.length - 1);%0A%09%09%09targetScrollY = containerRef.current.offsetTop + (scrollDistance * progress);%0A%09%09%7D\n %0A%0A%09%09\n@@ -11547,18 +11547,16 @@\n ation: 1\n-.2\n ,%0A%09%09%09eas\n@@ -11626,3867 +11626,3339 @@\n ull \n-min-h-screen relative overflow-hidden%22%0A%09%09%09ref=%7BcontainerRef%7D%3E%0A%0A%09%09%09%7B/* Horizontal Scroll Container */%7D%0A%09%09%09%3Cdiv%0A%09%09%09%09ref=%7BscrollContainerRef%7D%0A%09%09%09%09className=%22flex h-full%22%3E%0A%0A%09%09%09%09%7BcardData.map((card, index) =%3E (%0A%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09key=%7Bcard.id%7D%0A%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09if (el) cardsRef.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09className=%22w-screen h-full flex-shrink-0 relative flex items-center justify-center%22%0A%09%09%09%09%09%09style=%7B%7B backgroundColor: card.bgColor %7D%7D%3E%0A%0A%09%09%09%09%09%09%7B/* Parallax Background Element */%7D%0A%09%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09%09if (el) parallaxRefs.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09%09className=%22absolute inset-0 opacity-10%22%0A%09%09%09%09%09%09%09style=%7B%7B%0A%09%09%09%09%09%09%09%09background: %60radial-gradient(circle at 30%25 70%25, $%7Bcard.linkColor%7D40 0%25, transparent 50%25)%60%0A%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09/%3E%0A%0A%09%09%09%09%09%09%7B/* Card Content */%7D%0A%09%09%09%09%09%09%3Cdiv className=%22w-full max-w-7xl h-full flex items-center justify-between gap-8 px-6%0A%09%09%09%09%09%09%09xm:flex-col xm:justify-center xm:gap-6 xm:px-4 xm:py-8%0A%09%09%09%09%09%09%09sm:flex-col sm:justify-center sm:gap-8 sm:px-6 sm:py-8%0A%09%09%09%09%09%09%09md:gap-12 md:px-8%0A%09%09%09%09%09%09%09lg:gap-16 lg:px-12%0A%09%09%09%09%09%09%09xl:gap-20 xl:px-16%0A%09%09%09%09%09%09%092xl:gap-24 2xl:px-20%0A%09%09%09%09%09%09%09relative z-10%22%3E%0A%0A%09%09%09%09%09%09%09%7B/* Content Section */%7D%0A%09%09%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09%09%09if (el) contentRefs.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09%09%09className=%22w-1/2 flex flex-col justify-center gap-8%0A%09%09%09%09%09%09%09%09%09xm:w-full xm:gap-4 xm:text-center xm:px-2%0A%09%09%09%09%09%09%09%09%09sm:w-full sm:gap-6 sm:text-center sm:px-4%0A%09%09%09%09%09%09%09%09%09md:gap-8 md:px-6%0A%09%09%09%09%09%09%09%09%09lg:gap-10 lg:px-8%0A%09%09%09%09%09%09%09%09%09xl:gap-12%22%3E%0A%0A%09%09%09%09%09%09%09%09%3Cdiv className=%22flex flex-col gap-4 xm:gap-3 sm:gap-4 md:gap-5 lg:gap-6%22%3E%0A%09%09%09%09%09%09%09%09%09%3Ch4%0A%09%09%09%09%09%09%09%09%09%09className=%22text-2xl leading-tight tracking-tighter opacity-80%0A%09%09%09%09%09%09%09%09%09%09%09xm:text-lg xm:leading-snug%0A%09%09%09%09%09%09%09%09%09%09%09sm:text-xl sm:leading-tight%0A%09%09%09%09%09%09%09%09%09%09%09md:text-2xl%0A%09%09%09%09%09%09%09%09%09%09%09lg:text-3xl%0A%09%09%09%09%09%09%09%09%09%09%09xl:text-4xl%22%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.textColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.title%7D%0A%09%09%09%09%09%09%09%09%09%3C/h4%3E%0A%0A%09%09%09%09%09%09%09%09%09%3Ch2%0A%09%09%09%09%09%09%09%09%09%09className=%22font-bold leading-tight tracking-tighter%0A%09%09%09%09%09%09%09%09%09%09%09text-4xl xm:text-3xl%0A%09%09%09%09%09%09%09%09%09%09%09sm:text-4xl%0A%09%09%09%09%09%09%09%09%09%09%09md:text-5xl%0A%09%09%09%09%09%09%09%09%09%09%09lg:text-6xl%0A%09%09%09%09%09%09%09%09%09%09%09xl:text-7xl%0A%09%09%09%09%09%09%09%09%09%09%092xl:text-8xl%22%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.textColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.heading1%7D%0A%09%09%09%09%09%09%09%09%09%09%3Cbr /%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.heading2%7D%0A%09%09%09%09%09%09%09%09%09%3C/h2%3E%0A%0A%09%09%09%09%09%09%09%09%09%3Cp%0A%09%09%09%09%09%09%09%09%09%09className=%22leading-relaxed tracking-tight max-w-lg%0A%09%09%09%09%09%09%09%09%09%09%09text-base xm:text-sm xm:max-w-none xm:leading-relaxed%0A%09%09%09%09%09%09%09%09%09%09%09sm:text-base sm:max-w-none sm:leading-relaxed%0A%09%09%09%09%09%09%09%09%09%09%09md:text-lg md:max-w-xl%0A%09%09%09%09%09%09%09%09%09%09%09lg:text-xl lg:max-w-2xl%0A%09%09%09%09%09%09%09%09%09%09%09xl:text-2xl%22%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.textColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.para%7D%0A%09%09%09%09%09%09%09%09%09%3C/p%3E%0A%09%09%09%09%09%09%09%09%3C/div%3E%0A%0A%09%09%09%09%09%09%09%09%3Cdiv className=%22w-fit flex flex-col gap-2%0A%09%09%09%09%09%09%09%09%09xm:w-full xm:items-center%0A%09%09%09%09%09%09%09%09%09sm:w-full sm:items-center%0A%09%09%09%09%09%09%09%09%09md:w-fit%22%3E%0A%09%09%09%09%09%09%09%09%09%3CLink%0A%09%09%09%09%09%09%09%09%09%09key=%7Bcard.id%7D%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.linkColor %7D%7D%0A%09%09%09%09%09%09%09%09%09%09className=%22font-medium leading-tight tracking-tight hover:opacity-80 transition-opacity duration-300 relative group%0A%09%09%09%09%09%09%09%09%09%09%09text-base xm:text-sm%0A%09%09%09%09%09%09%09%09%09%09%09sm:text-base%0A%09%09%09%09%09%09%09%09%09%09%09md:text-lg%0A%09%09%09%09%09%09%09%09%09%09%09lg:text-xl%22%0A%09%09%09%09%09%09%09%09%09%09href=%7Bcard.href%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.href%7D%0A%09%09%09%09%09%09%09%09%09%09%3Cspan%0A%09%09%09%09%09%09%09%09%09%09%09className=%22absolute -bottom-1 left-0 w-0 h-0.5 bg-current transition-all duration-300 group-hover:w-full%22%0A%09%09%09%09%09%09%09%09%09%09%09style=%7B%7B backgroundColor: card.linkColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%3C/span%3E%0A%09%09%09%09%09%09%09%09%09%3C/Link%3E%0A%09%09%09%09%09%09%09%09%3C/div%3E%0A%09%09%09%09%09%09%09%3C/div%3E%0A%0A%09%09%09%09%09%09%09%7B/* Image Section */%7D%0A%09%09%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09%09%09if (el) imageRefs.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09%09%09className=%22w-1/2 flex items-center justify-center p-8%0A%09%09%09%09%09%09%09%09%09xm:w-full xm:p-4%0A%09%09%09%09%09%09%09%09%09sm:w-full sm:p-6%0A%09%09%09%09%09%09%09%09%09md:p-8%0A%09%09%09%09%09%09%09%09%09lg:p-10%0A%09%09%09%09%09%09%09%09%09xl:p-12%22%3E%0A%0A%09%09%09%09%09%09%09%09%3Cdiv className=%22relative w-full max-w-md%0A%09%09%09%09%09%09%09%09%09xm:max-w-xs%0A%09%09%09%09%09%09%09%09%09sm:max-w-sm%0A%09%09%09%09%09%09%09%09%09md:max-w-md%0A%09%09%09%09%09%09%09%09%09lg:max-w-lg%0A%09%09%09%09%09%09%09%09%09xl:max-w-xl%0A%09%09%09%09%09%09%09%09%092xl:max-w-2xl\n+h-screen relative overflow-hidden%22%0A%09%09%09ref=%7BcontainerRef%7D%3E%0A%0A%09%09%09%7B/* Responsive Scroll Container */%7D%0A%09%09%09%3Cdiv%0A%09%09%09%09ref=%7BscrollContainerRef%7D%0A%09%09%09%09className=%22flex h-full lg:flex-row xm:flex-col sm:flex-col md:flex-col%22%3E%0A%0A%09%09%09%09%7BcardData.map((card, index) =%3E (%0A%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09key=%7Bcard.id%7D%0A%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09if (el) cardsRef.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09className=%22w-screen h-full flex-shrink-0 relative flex items-center justify-center lg:w-screen xm:w-full sm:w-full md:w-full xm:h-screen sm:h-screen md:h-screen%22%0A%09%09%09%09%09%09style=%7B%7B backgroundColor: card.bgColor %7D%7D%3E%0A%0A%09%09%09%09%09%09%7B/* Parallax Background Element */%7D%0A%09%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09%09if (el) parallaxRefs.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09%09className=%22absolute inset-0 opacity-10%22%0A%09%09%09%09%09%09%09style=%7B%7B%0A%09%09%09%09%09%09%09%09background: %60radial-gradient(circle at 30%25 70%25, $%7Bcard.linkColor%7D40 0%25, transparent 50%25)%60%0A%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09/%3E%0A%0A%09%09%09%09%09%09%7B/* Card Content */%7D%0A%09%09%09%09%09%09%3Cdiv className=%22w-full max-w-7xl h-full flex items-center justify-between gap-8 px-6 lg:flex-row lg:justify-between xm:flex-col xm:justify-center xm:gap-6 sm:flex-col sm:justify-center sm:gap-8 md:flex-col md:justify-center md:gap-8 relative z-10%22%3E%0A%0A%09%09%09%09%09%09%09%7B/* Content Section */%7D%0A%09%09%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09%09%09if (el) contentRefs.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09%09%09className=%22lg:w-1/2 xm:w-full sm:w-full md:w-full flex flex-col justify-center gap-8 xm:gap-4 sm:gap-6 md:gap-6 px-8 xm:px-4 sm:px-6 md:px-6 lg:text-left xm:text-center sm:text-center md:text-center%22%3E%0A%0A%09%09%09%09%09%09%09%09%3Cdiv className=%22flex flex-col gap-4 xm:gap-3 sm:gap-4 md:gap-4%22%3E%0A%09%09%09%09%09%09%09%09%09%3Ch4%0A%09%09%09%09%09%09%09%09%09%09className=%22text-2xl xm:text-lg sm:text-xl md:text-xl leading-tight tracking-tighter opacity-80%22%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.textColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.title%7D%0A%09%09%09%09%09%09%09%09%09%3C/h4%3E%0A%0A%09%09%09%09%09%09%09%09%09%3Ch2%0A%09%09%09%09%09%09%09%09%09%09className=%22text-7xl xm:text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold leading-tight tracking-tighter%22%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.textColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.heading1%7D%0A%09%09%09%09%09%09%09%09%09%09%3Cbr /%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.heading2%7D%0A%09%09%09%09%09%09%09%09%09%3C/h2%3E%0A%0A%09%09%09%09%09%09%09%09%09%3Cp%0A%09%09%09%09%09%09%09%09%09%09className=%22text-xl xm:text-sm sm:text-base md:text-lg lg:text-xl leading-relaxed tracking-tight max-w-lg xm:max-w-none sm:max-w-none md:max-w-none%22%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.textColor %7D%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.para%7D%0A%09%09%09%09%09%09%09%09%09%3C/p%3E%0A%09%09%09%09%09%09%09%09%3C/div%3E%0A%0A%09%09%09%09%09%09%09%09%3Cdiv className=%22w-fit xm:w-full sm:w-full md:w-full lg:w-fit flex flex-col gap-2 xm:items-center sm:items-center md:items-center lg:items-start%22%3E%0A%09%09%09%09%09%09%09%09%09%3CLink%0A%09%09%09%09%09%09%09%09%09%09key=%7Bcard.id%7D%0A%09%09%09%09%09%09%09%09%09%09style=%7B%7B color: card.linkColor %7D%7D%0A%09%09%09%09%09%09%09%09%09%09className=%22text-lg xm:text-sm sm:text-base md:text-lg font-medium leading-tight tracking-tight hover:opacity-80 transition-opacity duration-300 relative group%22%0A%09%09%09%09%09%09%09%09%09%09href=%7Bcard.href%7D%3E%0A%09%09%09%09%09%09%09%09%09%09%7Bcard.href%7D%0A%09%09%09%09%09%09%09%09%09%09%3Cspan className=%22absolute -bottom-1 left-0 w-0 h-0.5 bg-current transition-all duration-300 group-hover:w-full%22 style=%7B%7B backgroundColor: card.linkColor %7D%7D%3E%3C/span%3E%0A%09%09%09%09%09%09%09%09%09%3C/Link%3E%0A%09%09%09%09%09%09%09%09%3C/div%3E%0A%09%09%09%09%09%09%09%3C/div%3E%0A%0A%09%09%09%09%09%09%09%7B/* Image Section */%7D%0A%09%09%09%09%09%09%09%3Cdiv%0A%09%09%09%09%09%09%09%09ref=%7B(el) =%3E %7B%0A%09%09%09%09%09%09%09%09%09if (el) imageRefs.current%5Bindex%5D = el;%0A%09%09%09%09%09%09%09%09%7D%7D%0A%09%09%09%09%09%09%09%09className=%22lg:w-1/2 xm:w-full sm:w-full md:w-full flex items-center justify-center p-8 xm:p-4 sm:p-6 md:p-6%22%3E%0A%0A%09%09%09%09%09%09%09%09%3Cdiv className=%22relative w-full max-w-md xm:max-w-xs sm:max-w-sm md:max-w-md\n %22%3E%0A%09\n@@ -15383,82 +15383,8 @@\n  0%7D%0A\n-%09%09%09%09%09%09%09%09%09%09sizes=%22(max-width: 768px) 90vw, (max-width: 1024px) 50vw, 40vw%22%0A\n %09%09%09%09\n@@ -15601,82 +15601,60 @@\n -40 \n-%0A%09%09%09%09xm:bottom-16 sm:bottom-18 md:bottom-20 lg:bottom-24 xl:bottom-28%0A%09%09%09%09\n+xm:bottom-12 sm:bottom-16 md:bottom-18 lg:bottom-20 \n $%7Bis\n@@ -16122,12 +16122,13 @@\n %3C/div%3E%0A%09);%0A%7D\n+%0A\n",
                            "isNew": false,
                            "isApplied": false
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "e19e1f47-4bd3-4dcd-b9ea-e2b30ec4275b"
            },
            "createdAt": 1750312151133,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}